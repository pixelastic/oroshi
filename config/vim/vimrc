" RESET  {{{
" We are using multibyte chars, so we must tell that to vim early
set encoding=utf-8
scriptencoding utf-8
" Turn it off for security reasons, we don't want arbitrary code executed from
" plugins
set nomodeline
"}}}
" PLUGINS {{{
source ~/.vim/includes/plugins.vim
" }}}
" FILES {{{
" The double slash at the end tells vim to store files keeping their directory
" structure
" Use backup, and save it in a custom dir
set backup
set backupdir=~/.vim/backup//
" Directly save to file, not to a temp file. This will make live-reload much
" snappier
set backupcopy=yes
" Swap files are useful for when your machine crashes or you reboot without
" saving your work in progress. By default they are stored in the same dir,
" which is inconvenient, though.
set directory=~/.vim/swap//
" Saving the latest undo in a file on disk
set undofile
set undolevels=1000
set undodir=~/.vim/undo//
" Save all the views (cursor position, fold status) in the same dir, close to
" the others
set viewdir=~/.vim/view//
" }}}
" BASIC  {{{
" Set current directory to the directory of the currently edited file.
" We're not using autochdir as it messes with plugins (committia, vimdeck)
augroup autochdir
  au!
  autocmd BufEnter * silent! lcd %:p:h
augroup END
" Saving files whenever I move from one to another
set autowrite
" Read files as UTF-8
setglobal fileencoding=utf-8
" Force Unix line ending on new file
set fileformats=unix,dos,mac
" Allow multiple buffers opened at once
set hidden
" Reload files if changed outside of vim (every 2s, or on tab change)
set autoread
set updatetime=2000
augroup autoread
  au!
  autocmd CursorHold * checktime
  autocmd TabEnter * checktime
augroup END
" Set +x to script files on save
augroup ft_add_chmodx
  au!
  function! AddExecutablePermissionIfScript()
    if getline(1) =~? '^#!' && getline(1) =~? '/bin/'
      silent !chmod +x <afile>
    endif
  endfunction
  au BufWritePost * call AddExecutablePermissionIfScript()
augroup END
" Reload the vimrc file whenever it is edited
augroup ft_vimrc
  au!
  au BufWritePost *vimrc mkview | source ~/.vimrc | loadview
augroup END
"}}}
" VIEWS {{{
" We only want the cursor and folds (not the custom options)
set viewoptions=cursor,folds
" Save sessions on close, load it on open
augroup views
  au!
  au BufWinLeave * silent! mkview!
  au BufWinEnter * silent! loadview
augroup END
" }}}
" DISPLAY {{{
" Improve display time on slow terminals
set ttyfast
set lazyredraw
" Display line numbers in left column
set number
" Hide  -- INSERT -- or -- VISUAL -- text, we already have it in the statusbar
set noshowmode
" Show more info about current command
set showcmd
" Keep search results centered
set scrolloff=999
" Hide invisible chars by default, but if they should be displayed, define the
" characters to define them.
set nolist
set listchars=nbsp:∅,tab:▸\ ,eol:↲,trail:·
" " Trying to visually highlight some pesky hidden characters
" match ExtraWhitespace /­./
" Chars used for GUI
set fillchars=stl:\ ,stlnc:\ ,vert:\|,fold:\ ,diff:-
" }}}
" FUNCTIONS {{{
source ~/.vim/includes/functions.vim
" }}}
" KEYBINDINGS {{{
source ~/.vim/includes/keybindings.vim
" }}}
" SEARCH {{{
source ~/.vim/includes/search.vim
" }}}
" AUTOCOMPLETION {{{
" Display autocomplete suggestion in a menu if more than one
set completeopt=menu
" Update the menu with matches as I type
set completeopt+=longest
" }}}
" COLORS   {{{
" Enabling syntax highlighting
syntax on
colorscheme oroshi
" Coloring current line
set cursorline
" Reloading the colorscheme
function! ReloadColorScheme(scheme)
  silent! mkview!
  execute 'colorscheme '.a:scheme
  silent! loadview
endfunction
" Switching between light and dark themes with F2
function! ToggleColorScheme()
  if g:colors_name ==# 'oroshi'
    call ReloadColorScheme('lucius')
    LuciusLightHighContrast
    return
  endif
  call ReloadColorScheme('oroshi')
endfunction
nnoremap <silent> <F2> :call ToggleColorScheme()<CR>
inoremap <silent> <F2> <Esc>:call ToggleColorScheme()<CR>li
" Display the current highlight group of the word under cursor
function! Debugcolor()
  let synstack = synstack(line('.'), col('.'))
  if len(synstack) == 0
    echo 'No special color'
    execute 'verbose hi Normal'
    return
  endif
  for id in synstack(line('.'), col('.'))
    execute 'hi '.synIDattr(id, 'name')
  endfor
  execute 'hi '.synIDattr(synIDtrans(id), 'name')
endfunction
nnoremap <F3> :call Debugcolor()<CR>
"}}}
" COMMANDS {{{
" Keep more commands in history
set history=1000
" Save file using sudo
cnoremap w!! w !sudo tee '%' >/dev/null<CR><CR>
" }}}
" FOLDING  {{{
source ~/.vim/includes/folding.vim
"}}}
" INDENTATION  {{{
" We use the advanced indentation method provided by the filetype plugin
set nosmartindent
filetype plugin indent on
" autoindent is still needed to correctly indent list items
set autoindent
" Using two spaces for indentation as a default. Using tabs can be overwritten
" in language specific-files if needed.
set tabstop=2
set shiftwidth=2
set expandtab
" Lines too long to fit on one screen will be truncated.
set nowrap
let &showbreak='↪ '
" Force a 79 column policy with an auto-break on words in comments to assure
" maximum readability. Visually add a column to see where the cut will be.
set linebreak
set colorcolumn=81
set textwidth=80
" Create two format modes, for code and for text
" c : Comments are wrapped based on textwidth
" r : New line in comment is a comment when pressing <Enter>
" o : New line in comment is a comment when pressing 'o'
" n : Handles list while formatting
" q : Comments can be re-wrapped using gq
" 1 : Do not end lines with one-char words
set formatoptions=cronq1
" We make sure that backspace in insert mode can delete new lines and tabs
set backspace=indent,eol,start
" Format whole paragraph
nnoremap gqp mzvipgq`z
"}}}
" SEARCH / REPLACE  {{{
" Searchs are case-insensitive, unless an uppercase is present
set ignorecase
set smartcase
" Results are highlighted as we type as well as when found. ,<Space> clears the
" highlight
set incsearch
set hlsearch
nnoremap <silent> <Leader><Space> :nohlsearch<CR>
" Regexps will use the extended format (no need to escape special chars to give
" them meaning - (.*) will work when \(.*\) was needed before. Also, all
" matches are global on the line, not limited to the first one.
set gdefault
nnoremap / /\v
nnoremap ? ?\v
nnoremap :s/ :s/\v
nnoremap :ù :%s/
vnoremap :ù :s/
"}}}
" SNIPPETS  {{{
" Lorem ipsum
iabbrev lorem Lorem ipsum dolor sit amet, consectetur adipiscing elit
iabbrev llorem Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Etiam lacus ligula, accumsan id imperdiet rhoncus, dapibus vitae arcu.  Nulla non quam erat, luctus consequat nisi
iabbrev lllorem Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Etiam lacus ligula, accumsan id imperdiet rhoncus, dapibus vitae arcu.  Nulla non quam erat, luctus consequat nisi.  Integer hendrerit lacus sagittis erat fermentum tincidunt.  Cras vel dui neque.  In sagittis commodo luctus.  Mauris non metus dolor, ut suscipit dui.  Aliquam mauris lacus, laoreet et consequat quis, bibendum id ipsum.  Donec gravida, diam id imperdiet cursus, nunc nisl bibendum sapien, eget tempor neque elit in tortor
" }}}
" SPLIT {{{
" Splitting right and bottom feels more natural
set splitright
set splitbelow
" Use Arrow in normal mode to move accros splits
nnoremap <Up> <C-W>k
nnoremap <Right> <C-W>l
nnoremap <Down> <C-W>j
nnoremap <Left> <C-W>h
"}}}
" STATUS LINE {{{
source ~/.vim/includes/statusline/index.vim
"}}}
" TABS {{{
" Do not limit the number of tabs to open when launching vim
set tabpagemax=1000
" Open file in new tab with ,t
nnoremap <Leader>t :tabe<Space>
" Switch tab with movement keys
nnoremap <C-H> gT
nnoremap <C-L> gt
inoremap <C-H> <Esc>gT
inoremap <C-L> <Esc>gt
cnoremap <C-H> <C-C>gT
cnoremap <C-L> <C-C>gt
"}}}
" TYPOS {{{
iabbrev Gvien Given
iabbrev initialiaeze initialize
iabbrev initialiaze initialize
iabbrev initiliaze initialize
iabbrev intiialiaee initialize
iabbrev intiialiaze initialize
iabbrev intiialize initialize
" }}}
" WILDMENU {{{
" We enable a simple wildmenu with basic Tab-completion.
set wildmenu
" We ignore some files and dir that we're sure we'll never edit in vim
set wildignore=''
set wildignore+=*.orig,*.swp,*.crcdownload            " Tmp files
set wildignore+=*.jpg,*.jpeg,*.png,*.ico,*.gif,*.pdf  " Image files
set wildignore+=*.exe,*.dll,*.pyc,*.so                " Binaries
set wildignore+=*.zip,*.rar,*.tgz,*.tar,*.cbz         " Archive files
" }}}
" YANK / PASTE   {{{
" Note: Systems have two different clipboards.
" unnamed is (select text / middle click) and accessed with "*
" unnamedplus is (Ctrl+C / Ctrl+V) and accessed with "+
" We only use unnamed plus, if available
set clipboard=
if has('unnamedplus')
  set clipboard+=unnamedplus
  function! PrePaste()
    " We guess that if both + and * registers have the same number of words,
    " and + is longer than *, it means they are actually the same source, but
    " + gets garbled, so we'll use * in place of +
    let lenstar = len(@*)
    let wordstar = len(split(@*))
    let lenplus = len(@+)
    let wordplus = len(split(@+))

    " If @+ is empty, we use @*
    if lenplus == 0 && lenstar > 0
      let @+=@*
    endif

    " If about same size, but @+ is bigger than @* we guess that it gets
    " garbled and we replace it by @*
    if wordstar !=1 && wordstar == wordplus && lenstar < lenplus
      let @+=@*
    endif
  endfunction
  " noremap <silent> p :call PrePaste()<CR>p
  " noremap <silent> P :call PrePaste()<CR>P
endif
" As gv selects last selected text, we add gp to select last pasted text
nnoremap gp `[v`]
" We'll use x as a way to delete text without keeping it in a paste buffer
nnoremap x "_x
vnoremap x "_x
" [c]hanging a word does not put it in yank buffer
nnoremap c "_c
"}}}


" GIT {{{
let g:gitgutter_max_signs=10000
" " }}}
" SYNTASTIC {{{
let g:syntastic_aggregate_errors = 1
let g:syntastic_auto_loc_list=0
let g:syntastic_always_populate_loc_list=1
let g:syntastic_error_symbol=' '
let g:syntastic_style_error_symbol=' '
let g:syntastic_warning_symbol=' '
let g:syntastic_style_warning_symbol=' '

let g:syntastic_mode_map={ 'mode': 'passive',
                     \ 'active_filetypes': [
                       \ 'ansible',
                       \ 'css', 'scss',
                       \ 'dockerfile',
                       \ 'html', 'pug',
                       \ 'javascript', 'vue',
                       \ 'json',
                       \ 'markdown',
                       \ 'php',
                       \ 'python',
                       \ 'ruby',
                       \ 'bash', 'sh', 'zsh',
                       \ 'vim',
                       \ 'yaml',
                       \ 'xml'
                     \ ],
                     \ 'passive_filetypes': [] }

" }}}
" FILETYPES {{{
" Load skeletons
augroup skeletons
  au!
  au BufNewFile * :silent! exec ":0r ~/.vim/includes/skeletons/skeleton.".expand('%:e')
augroup END

" ,ve to edit vimrc
nnoremap <leader>ve :tabe ~/.oroshi/config/vim/vimrc<CR>
" ,vr to reload vimrc
nnoremap <leader>vr mz:source ~/.vimrc<CR>:let &filetype=&filetype<CR>:loadview<CR>:nohlsearch<CR>`z 
" man to open the manpage of a command in a new tab
nnoremap <silent> man :tabe<CR>:setlocal filetype=man<CR>:.!man<Space>
" }}}


" Custom Config {{{
let hostname = system('echo -n $HOST')
let customConfig=expand("~/.oroshi/private/config/vim/".hostname.".vim")
if filereadable(customConfig)
  exec "source ".customConfig
endif
" }}}

