# Update internal metadata of an ebook based on where it's saved in the disk
# Usage:
# $ ebook-metadata-update ./GAIMAN Neil - Good Omens.epub
function ebook-metadata-update() {
  # Parse inputs {{{
  zparseopts -E -D \
    -cover:=flagCover

  # TODO: Better parsing of lastName/firstName
  # It currently considers the first word as the last name, but that fails on
  # LE GUIN Ursula. A solution would be to take the lastName as the serie of
  # words made only of capital letters (or dashes)
  # That might work
  # The edge case are names like ROWLINK J. K.

  local input="$1"
  local coverPath=${flagCover[2]}

  # There are some slight variations between setting metadata for epub (to read
  # on phone) and to set it for mobi (to read on kindle)
  local extension=${input:e}
  local isEpub=0
  [[ $extension == 'epub' ]] && isEpub=1
  local isMobi=0
  [[ $extension == 'mobi' ]] && isMobi=1

  # Names can follow one of those patterns:
  # Simple: PALAHNIUK Chuck - Survivor
  # Serie:  PRATCHETT Terry - Discworld - 05 - Sourcery
  local basename="${input:t:r}"
  local split=(${(@s/ - /)basename})

  # Author is always the first one
  local authorName=$split[1]
  local authorSplit=(${(@s/ /)authorName})
  local authorLastName=$authorSplit[1]
  local authorFirstName=(${authorSplit[@]:1})

  # If there are more than 2 elements, it's a serie
  local isSerie=0
  [[ ${#split[@]} -gt 2 ]] && isSerie=1

  # Book name is either the second or the last, depending if it's a serie or not
  local bookName=$split[2]
  [[ $isSerie == 1 ]] && bookName=$split[4]

  # If a serie, we also need the name of the serie and the book index in it
  if [[ $isSerie == 1 ]]; then
    local serieName=$split[2]
    local bookIndexString=$split[3]
    local bookIndexNumeric=$((10#$bookIndexString))
  fi

  # We get the language of the file
  local bookLanguage=$(ebook-metadata-value $input Languages)
  [[ $bookLanguage == "" ]] && bookLanguage="eng"

  # We get the identifiers of the file
  local bookIdentifiers=$(ebook-metadata-value $input Identifiers)
  
  # We get the rating
  local bookRating=$(ebook-metadata-value $input Rating)
  # }}}

  # Build list of arguments {{{
  # We now build the list of arguments
  local ebookMetaArguments=()

  # Cover
  # Pick the cover in the same folder if no --cover is specified
  [[ $coverPath == "" ]] &&  coverPath="${input//.${extension}/.jpg}"
  # Add the cover if the file exists
  if [[ -e $coverPath ]]; then
    ebookMetaArguments+=(--cover="${coverPath:a}")
  fi

  # Author
  # Note: There are two notions here. How the author name should be displayed,
  # and how it should be sorted. Usually, it's displayed as "firstName
  # lastName", but should be ordered by "lastName firstName". Both epub and mobi
  # handle that differently.
  if [[ $isEpub == 1 ]]; then
    # Epub allow both:
    # --authors for how it's displayed (Terry PRATCHETT)
    # --author-sort for how it's sorted (PRATCHETT, Terry)
    ebookMetaArguments+=(--authors="${authorFirstName} ${authorLastName}")
    ebookMetaArguments+=(--author-sort="${authorLastName}, ${authorFirstName}")
  fi
  if [[ $isMobi == 1 ]]; then
    # Mobi only uses the --authors argument:
    # - It uses it both for display and sorting
    # - BUT, if the field contains a comma, it assumes it means "lastName,
    # firstName" and will use it to display and sort accordingly
    ebookMetaArguments+=(--authors="${authorLastName}, ${authorFirstName}")
  fi

  # Title of the book
  # When the book is a one-shot, defining the title is easy.
  # The complexity will start when it's part of a serie (see below)
  if [[ $isSerie == 0 ]]; then
    ebookMetaArguments+=(--title="${bookName}")
  fi

  # Series
  if [[ $isSerie == 1 ]]; then
    # Books of a given serie should be ordered by their index in the serie, not
    # by their alphabetical name. Once again, epub and mobi vary greatly in what
    # they allow us to do here
    if [[ $isEpub == 1 ]]; then
      # We just tell the epub the name of book, the name of the serie and the
      # index of the book, and it will take care of all sorting for us
      ebookMetaArguments+=(--title="${bookName}")
      ebookMetaArguments+=(--series="${serieName}")
      ebookMetaArguments+=(--index="${bookIndexNumeric}")
      ebookMetaArguments+=(--title-sort="${serieName} - ${bookIndexString} - ${bookName}")
    fi
    if [[ $isMobi == 1 ]]; then
      # Mobi has no notion of series, or index, so to correctly order the book
      # in a serie, we need to change its name
      ebookMetaArguments+=(--title="${serieName} - ${bookIndexString} - ${bookName}")
    fi
  fi

  # Tags
  # It's possible to attribute tags to books. I will add some data to it to
  # potentially find them more easily in a UI
  local tags=()
  tags+=(${bookLanguage})
  tags+=(${authorLastName})
  if [[ $isSerie == 1 ]]; then
    tags+=(${serieName})
  fi
  # Tags should be separated by commas
  ebookMetaArguments+=(--tags=${(j/,/)tags})

  # Metadata
  # Remove all identifiers
  # This usually contains stuff like isbn:, url:
  # Specifically, the mobi-asin: identifier on mobi files can't be removed
  #
  if [[ $bookIdentifiers != "" ]]; then
    local rawIdentifiers=(${(@s/, /)bookIdentifiers})
    for rawIdentifier in $rawIdentifiers; do
      local split=(${(@s/:/)rawIdentifier})
      local identifierName=$split[1]
      local identifierValue=''

      # Some identifiers can't be removed but only renamed
      [[ $identifierName == 'sonybookid' ]] && identifierValue='_'

      # Some identifiers have their own flag, so we will rather use the
      # dedicated flag
      [[ $identifierName == 'isbn' ]] && continue;

      ebookMetaArguments+=(--identifier ${identifierName}:${identifierValue})
    done
  fi

  # Each format (epub and mobi) seems to have a different list of default
  # metadata added, and different ways of cleaning them.
  if [[ $isEpub == 1 ]]; then
    # When a value is already set as an weird or empty string, it seems that
    # best way to delete it is to first write something, then set it to an empty
    # string (or sometimes a single space).
    ebookMetaArguments+=(--isbn='__INVALID__')
    ebookMetaArguments+=(--isbn='')
    ebookMetaArguments+=(--publisher='__INVALID__')
    ebookMetaArguments+=(--publisher='')
    ebookMetaArguments+=(--book-producer='__INVALID__')
    ebookMetaArguments+=(--book-producer='')
    # Comments need a single space, doesn't work with empty string
    ebookMetaArguments+=(--comments='__INVALID__')
    ebookMetaArguments+=(--comments=' ')

    # I couldn't find a way to remove, or even edit the "Rights" field

    # There doesn't seem to be a way to remove the ratings, so the best I can do
    # is change them to the weirdest value I could find: 42. Somehow the value
    # I pass is divided by 2.
    if [[ $bookRating != "" ]]; then
      ebookMetaArguments+=(--rating=84)
    fi
  fi
  if [[ $isMobi == 1 ]]; then
    # Seems like passing an empty string is not enough, and one need to pass
    # a single space instead
    ebookMetaArguments+=(--publisher=' ')
    ebookMetaArguments+=(--book-producer=' ')
    ebookMetaArguments+=(--comments=' ')
    # For isbn, I need to pass an invalid one, for mobi only
    ebookMetaArguments+=(--isbn='__INVALID__')
    # Note: It doesn't seem possible to remove the mobi-asin: identifier from
    # mobi files
  fi
  # }}}

  ebook-meta $input \
    $ebookMetaArguments \
    &>/dev/null

  ebook-meta $input

}
