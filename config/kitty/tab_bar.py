import os
import json
import subprocess
from pprint import pprint
from kitty.boss import get_boss
from kitty.fast_data_types import (
    Screen,
    add_timer,
    get_options,
)
from kitty.utils import color_as_int
from kitty.tab_bar import (
    DrawData,
    ExtraData,
    Formatter,
    TabBarData,
    as_rgb,
    draw_attributed_string,
)

KITTY_OPTIONS = get_options()

# List of items to display in the status bar.
# Order is important, and number is the refresh delay (in seconds)
STATUSBAR_DEFINITION = [
    "spotify:5",
    "battery:60",
    "cpu:30",
    "ram:30",
    # "ping:30",
    "clock:60",
    "dropbox:300",
]


# HELPERS {{{
# Get a cursor color from an int
# Kitty expects screen.cursor.x/y to be in a specific format
# This will conver a color number (0-256, as defined in colors.conf) to the
# expected format
def _oroshi_get_cursor_color(colorNumber: int):  # {{{
    global KITTY_OPTIONS
    return as_rgb(color_as_int(getattr(KITTY_OPTIONS, f"color{colorNumber}")))


# }}}


# Mark the tab manager as dirty so Kitty will redraw it whenever it can
def _oroshi_refresh_statusbar():  # {{{
    kittyTabManager = get_boss().active_tab_manager
    if kittyTabManager is not None:
        kittyTabManager.mark_tab_bar_dirty()


# }}}


# }}}


# TABS {{{
# PROJECT_LIST {{{
# Set the PROJECT_LIST object, that contains name, icons and colors of all
# projects
def _oroshi_init_project_list():
    global PROJECT_LIST
    PROJECT_LIST = {}

    # This file is automatically generated from its sister projects.zsh in the
    # same foler
    jsonPath = "/home/tim/.oroshi/config/zsh/theming/env/projects.json"
    rawProjectData = json.load(open(jsonPath, "r"))

    # First, build an object with one key per project, by reading the _NAME
    # variables
    for key, value in rawProjectData.items():
        # Keep only name keys (ending with _NAME, but not FOREGROUND_NAME nor
        # BACKGROUND_NAME)
        if not (key.endswith("_NAME") and not key.endswith("GROUND_NAME")):
            continue

        projectName = value
        projectPrefix = key.replace("_NAME", "")
        PROJECT_LIST[projectName] = {"__prefix": projectPrefix}

    # Fill each entry with icon and colors
    for _, projectData in PROJECT_LIST.items():
        projectPrefix = projectData["__prefix"]

        # Icon
        projectData["icon"] = rawProjectData.get(f"{projectPrefix}_ICON")

        # Background
        projectBgRaw = rawProjectData.get(f"{projectPrefix}_BACKGROUND", None)
        if projectBgRaw:
            projectData["bg"] = _oroshi_get_cursor_color(projectBgRaw)

        # Foreground
        projectFgRaw = rawProjectData.get(f"{projectPrefix}_FOREGROUND", None)
        if projectFgRaw:
            projectData["fg"] = _oroshi_get_cursor_color(projectFgRaw)


PROJECT_LIST = {}
_oroshi_init_project_list()
# }}}


# Draw a tab. Called for each tab.
def _oroshi_draw_tab(  # {{{
    draw_data: DrawData,
    screen: Screen,
    tab: TabBarData,
    before: int,
    max_title_length: int,
    index: int,
    is_last: bool,
    extra_data: ExtraData,
) -> int:
    global PROJECT_LIST

    # Definitions
    defaultBg = as_rgb(int(draw_data.default_bg))

    tabData = _oroshi_tab_data(tab, draw_data)
    tabTitle = tabData["title"]
    tabIcon = tabData["icon"]
    tabFg = tabData["fg"]
    tabBg = tabData["bg"]
    tabIsFullscreen = tabData["isFullscreen"]

    nextTabData = _oroshi_tab_data(extra_data.next_tab, draw_data)

    # Draw tab name
    screen.cursor.fg = tabFg
    screen.cursor.bg = tabBg
    screen.draw(f" {tabIcon}{tabTitle} ")

    # Add fullscreen marker
    if tabIsFullscreen:
        screen.draw(" ")

    # Draw separator
    screen.cursor.bg = nextTabData.get("bg", defaultBg)
    screen.cursor.fg = tabBg
    screen.draw("")

    # If last tab, also draw the status bar
    if is_last:
        _oroshi_draw_statusbar(screen)

    return screen.cursor.x


# }}}


# Returns a hash of useful data for a given tab
def _oroshi_tab_data(tab: TabBarData, draw_data: DrawData):  # {{{
    global PROJECT_LIST

    # Quick fail if no tab
    if not tab:
        return {}

    # Default values
    defaultInactiveFg = as_rgb(int(draw_data.inactive_fg))
    defaultInactiveBg = as_rgb(int(draw_data.inactive_bg))
    defaultActiveFg = as_rgb(int(draw_data.active_fg))
    defaultActiveBg = as_rgb(int(draw_data.active_bg))

    # Find info from tab as passed by Kitty
    tabTitle = tab.title
    tabIsFullscreen = tab.layout_name == "stack"
    tabIsActive = tab.is_active

    # Find info from the list of projects if one matches the same name
    projectData = PROJECT_LIST.get(tabTitle, {})
    tabIcon = projectData.get("icon", "")

    tabData = {
        "title": tabTitle,
        "isFullscreen": tabIsFullscreen,
        "icon": tabIcon,
    }

    # Inactive tab, revert to default styles
    if not tabIsActive:
        tabData["fg"] = defaultInactiveFg
        tabData["bg"] = defaultInactiveBg
    # Active tab, use project colors if defined
    else:
        tabData["fg"] = projectData.get("fg", defaultActiveFg)
        tabData["bg"] = projectData.get("bg", defaultActiveBg)

    return tabData


# }}}
# }}}


# STATUSBAR {{{
# Update a specific statusbar part
# Works by running an external command, and updating the internal representation
#
# I previously used tmux, and had each part of the statusbar being built from
# a separate function. I converted those functions into statusbar-XXX scripts
# that now output JSON, to be more easily parsed by this script.
def _oroshi_statusbar_update(statusbarName: str):  # {{{
    # Path to the executable
    binName = f"statusbar-{statusbarName}"
    binPath = f"/home/tim/.oroshi/scripts/bin/statusbar/{binName}"

    # Convert raw JSON output to object
    rawOutput = subprocess.check_output(binPath)
    chunks = json.loads(rawOutput.decode())

    # Cast all fg/bg to expected format
    for chunk in chunks:
        if chunk.get("fg", None):
            chunk["fg"] = _oroshi_get_cursor_color(int(chunk["fg"]))
        if chunk.get("bg", None):
            chunk["bg"] = _oroshi_get_cursor_color(int(chunk["bg"]))

    # Update the representation of this part of statusbar
    STATUSBAR["items"][statusbarName]["chunks"] = chunks

    # Refresh the whole statusbar
    _oroshi_refresh_statusbar()


# }}}


# Init the STATUSBAR object
def _oroshi_init_statusbar():  # {{{
    global STATUSBAR
    global STATUSBAR_DEFINITION

    STATUSBAR = {"order": [], "items": {}}

    for item in STATUSBAR_DEFINITION:
        itemName, itemFrequency = item.split(":")
        itemFrequency = int(itemFrequency)

        # Add to the list
        STATUSBAR["order"].append(itemName)

        # Create an entry in items
        STATUSBAR["items"][itemName] = {
            "frequency": itemFrequency,
            "chunks": [],
        }

        # Update this specific statusbar part right now
        callback = lambda _=None, itemName=itemName: (  # noqa: E731
            _oroshi_statusbar_update(itemName),
        )
        callback()

        # And mark it to run again at a regular frequency
        add_timer(callback, itemFrequency, True)


STATUSBAR = {}
_oroshi_init_statusbar()
# }}}


# External tools can call kitty-refresh (which will create a beacon file)
# We will periodically check for this beacon, and if present refresh the
# statusbar
def _oroshi_check_for_forced_refresh(_=None):  # {{{
    beaconPath = "/tmp/oroshi/kitty-refresh"
    print("check for", beaconPath)

    # Nothing to do
    if not os.path.exists(beaconPath):
        return

    # We re-run all statusbar parts
    for itemName in STATUSBAR["order"]:
        _oroshi_statusbar_update(itemName)

    # We remove the beacon
    os.remove(beaconPath)


# Check for the beacon every 5s
add_timer(_oroshi_check_for_forced_refresh, 5, True)
# }}}


# Display the status bar
def _oroshi_draw_statusbar(screen: Screen):  # {{{
    global STATUSBAR

    # Position cursor at beginning of line
    statusbarWidth = _oroshi_get_statusbar_width()
    screen.cursor.x = screen.columns - statusbarWidth

    # Write all statuses
    for itemName in STATUSBAR["order"]:
        itemData = STATUSBAR["items"][itemName]

        for itemChunk in itemData["chunks"]:
            chunkFg = itemChunk.get("fg", None)
            chunkBg = itemChunk.get("bg", None)
            chunkText = itemChunk.get("text", "")

            # Default coloring
            draw_attributed_string(Formatter.reset, screen)

            # Specific coloring
            if chunkFg:
                screen.cursor.fg = chunkFg
            if chunkBg:
                screen.cursor.bg = chunkBg
            # TODO: Add boldness

            screen.draw(chunkText)


# }}}


# Get the statusbar width, to correctly position it
def _oroshi_get_statusbar_width():  # {{{
    global STATUSBAR
    statusbarWidth = 0
    for itemName in STATUSBAR["order"]:
        itemData = STATUSBAR["items"][itemName]
        for itemChunk in itemData["chunks"]:
            statusbarWidth += len(itemChunk["text"])

    return statusbarWidth


# }}}


# Default method called by kitty. We pass a call to our own _oroshi_draw_tab as
# any print() statement in the default one is silenced
def draw_tab(  # {{{
    draw_data: DrawData,
    screen: Screen,
    tab: TabBarData,
    before: int,
    max_title_length: int,
    index: int,
    is_last: bool,
    extra_data: ExtraData,
) -> int:
    _oroshi_draw_tab(
        draw_data,
        screen,
        tab,
        before,
        max_title_length,
        index,
        is_last,
        extra_data,
    )

    return screen.cursor.x


# }}}
