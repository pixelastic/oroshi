// Getting to a working xkb configuration has been a long process.
//
// === The main things to know
//
// Ubuntu 24+ uses Wayland instead of X11, so xmodmap no longer works. Instead, we
// define a custom keyboard layout using xkb.
//
// Any change made to an xkb configuration is not propagated back up to Wayland.
// Instead, Gnome settings must be updated, so Wayland goes fetch the latest xkb
// config. We are using a gsettings call in the xkb deploy script for that.
//
// The evdev.xml file is a the bridge between xkb and Wayland. It defines a new
// variant to the french keyboard, called oroshi. This variant is now available
// through the Gnome UI and can be selected. Doing so forces an update of the
// running config.
//
// The evdev.xml file should be saved in ~/.config/xkb/evdev.xml. Its
// layout/configItem/name key should map to the layout it extends (here, fr for
// french). This means that the actual config file where we store our new
// mappings should be in ~/.config/xkb/symbols/fr.
//
// Now, its variant/configItem/name key should match the name of the xkb_symbols in
// this very file. The other two keys are only used for display in the UI.
//
// === References
//
// Good read on xkb actually works, mostly for a broad understanding and history
// of the thing.
// https://who-t.blogspot.com/2020/02/user-specific-xkb-configuration-part-1.html
// https://who-t.blogspot.com/2020/07/user-specific-xkb-configuration-part-2.html
// https://who-t.blogspot.com/2020/08/user-specific-xkb-configuration-part-3.html
// https://who-t.blogspot.com/2020/09/user-specific-xkb-configuration-putting.html
//
// Knowing what xkb is loading initially: stxkbmap -print
//
// Input:
// You can call "sudo evtest /dev/input/event3" to see in realtime which
// key is being pressed. Important output will start with KEY_.
// The probable real key name will ditch the KEY_, add _ between words and
// move to lowercase.
//
//
// List of key names:
// /usr/share/X11/xkb/keycodes/evdev
//
// Output:
// You can call "wev" to see what symbol Wayland associates with the key.
//
// List of symbols:
// Navigation:   /usr/share/X11/xkb/symbols/inet
// Alphanumeric: /usr/share/X11/xkb/symbols/fr


partial alphanumeric_keys modifier_keys
xkb_symbols "oroshi" {
 name[Group1]= "French (oroshi)";
 include "fr(basic)"
 include "level3(ralt_switch)"   // 3rd = AltGr,     4th = Shift-AltGr
 include "level5(rctrl_switch)"  // 5th = RightCtrl, 6th = Shift-RightCtrl

 // List of phantom <F> keys already in use
 // F13: Caps Lock (used in vim to switch modes)
 // F14: Right Shift (used as a keybinding for speech to text)

 // F-row
 // key  <ESC> {[ Escape ]};
 // key <FK01> {[ F1 ]};
 // key <FK02> {[ F2 ]};
 // key <FK03> {[ F3 ]};
 // key <FK04> {[ F4 ]};
 // key <FK05> {[ F5 ]};
 // key <FK06> {[ F6 ]};
 // key <FK07> {[ F7 ]};
 // key <FK08> {[ F8 ]};
 // key <FK09> {[ F9 ]};
 // key <FK10> {[ F10 ]};
 // key <FK11> {[ F11 ]};
 // key <FK12> {[ F12 ]};
 // key <HOME> {[ Home   ]};
 // key <END>  {[ End    ]};
 // key <INS>  {[ Insert ]};
 key <DELE> {type[Group1]="EIGHT_LEVEL",[ Delete,  Delete, BackSpace, VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // {Delete} {Delete} {Backspace} âŠ˜ âŠ˜ âŠ˜

 // Digits
 //  <key>                               <normal>     <Shift>      <AltGr>       <S-AltGr>    <RightCtrl> <S-RightCtrl>
 key <TLDE>	{type[Group1]="EIGHT_LEVEL",[ XF86Search, VoidSymbol,  twosuperior,  VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // {Search} âŠ˜ Â² âŠ˜ âŠ˜ âŠ˜ âŠ˜
 key <AE01>	{type[Group1]="EIGHT_LEVEL",[ ampersand,  1,           VoidSymbol,   VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // & 1 âŠ˜ âŠ˜ âŠ˜ âŠ˜
 key <AE02>	{type[Group1]="EIGHT_LEVEL",[ eacute,     2,           asciitilde,   Eacute,      VoidSymbol,  VoidSymbol ]}; // Ã© 2 ~ Ã‰ âŠ˜ âŠ˜
 key <AE03>	{type[Group1]="EIGHT_LEVEL",[ quotedbl,   3,           numbersign,   VoidSymbol,  U2665,       VoidSymbol ]}; // " 3 # âŠ˜ â™¥ âŠ˜
 key <AE04>	{type[Group1]="EIGHT_LEVEL",[ apostrophe, 4,           braceleft,    VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // ' 4 { âŠ˜ âŠ˜ âŠ˜
 key <AE05>	{type[Group1]="EIGHT_LEVEL",[ parenleft,  5,           bracketleft,  VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // ( 5 [ âŠ˜ âŠ˜ âŠ˜
 key <AE06>	{type[Group1]="EIGHT_LEVEL",[ minus,      6,           bar,          VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // - 6 | âŠ˜ âŠ˜ âŠ˜
 key <AE07>	{type[Group1]="EIGHT_LEVEL",[ egrave,     7,           grave,        Egrave,      VoidSymbol,  VoidSymbol ]}; // Ã¨ 7 ` Ãˆ âŠ˜ âŠ˜
 key <AE08>	{type[Group1]="EIGHT_LEVEL",[ underscore, 8,           backslash,    VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // _ 8 \ âŠ˜ âŠ˜ âŠ˜
 key <AE09>	{type[Group1]="EIGHT_LEVEL",[ ccedilla,   9,           asciicircum,  Ccedilla,    VoidSymbol,  VoidSymbol ]}; // Ã§ 9 ^ Ã‡ âŠ˜ âŠ˜
 key <AE10>	{type[Group1]="EIGHT_LEVEL",[ agrave,     0,           at,           Agrave,      VoidSymbol,  VoidSymbol ]}; // Ã  0 @ Ã€ âŠ˜ âŠ˜
 key <AE11>	{type[Group1]="EIGHT_LEVEL",[ parenright, degree,      bracketright, VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // ) Â° ] âŠ˜ âŠ˜ âŠ˜
 key <AE12>	{type[Group1]="EIGHT_LEVEL",[ equal,      plus,        braceright,   notequal,    VoidSymbol,  VoidSymbol ]}; // = + } â‰  âŠ˜ âŠ˜
 key <BKSP> {type[Group1]="EIGHT_LEVEL",[ BackSpace,  BackSpace,   Delete,       VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // {Backspace} {Backspace} {Delete} âŠ˜ âŠ˜ âŠ˜
 // First row (AZERTY)
 //  <key>                                <normal>         <Shift>         <AltGr>     <S-AltGr>    <RightCtrl>  <S-RightCtrl>
 // key  <TAB> {[ Tab, ISO_Left_Tab ]};
 key <AD01> {type[Group1]="EIGHT_LEVEL",[ a,               A,              ae,         AE,          VoidSymbol,  VoidSymbol ]}; // a A Ã¦ Ã† âŠ˜ âŠ˜
 key <AD02> {type[Group1]="EIGHT_LEVEL",[ z,               Z,              VoidSymbol, VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // z Z âŠ˜ âŠ˜ âŠ˜ âŠ˜
 key <AD03> {type[Group1]="EIGHT_LEVEL",[ e,               E,              EuroSign,   VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // e E â‚¬ âŠ˜ âŠ˜ âŠ˜
 key <AD04>	{type[Group1]="EIGHT_LEVEL",[ r,               R,              grave,      registered,  U1F7E5,      U1F534     ]}; // r R ` Â® ðŸŸ¥ ðŸ”´
 key <AD05> {type[Group1]="EIGHT_LEVEL",[ t,               T,              trademark,  VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // t T â„¢ âŠ˜ âŠ˜ âŠ˜
 key <AD06> {type[Group1]="EIGHT_LEVEL",[ y,               Y,              VoidSymbol, VoidSymbol,  U1F7E8,      U1F7E1     ]}; // y Y âŠ˜ âŠ˜ ðŸŸ¨ ðŸŸ¡
 key <AD07>	{type[Group1]="EIGHT_LEVEL",[ u,               U,              backslash,  mu,          VoidSymbol,  VoidSymbol ]}; // u U \ Âµ âŠ˜ âŠ˜
 key <AD08>	{type[Group1]="EIGHT_LEVEL",[ i,               I,              minus,      U00B7,       U2014,       VoidSymbol ]}; // i I - Â· â€” âŠ˜
 key <AD09>	{type[Group1]="EIGHT_LEVEL",[ o,               O,              underscore, oe,          U1F7E7,      U1F7E0     ]}; // o O _ Å“ ðŸŸ§ ðŸŸ 
 key <AD10>	{type[Group1]="EIGHT_LEVEL",[ p,               P,              braceleft,  braceright,  VoidSymbol,  VoidSymbol ]}; // p P { } âŠ˜ âŠ˜
 key <AD11>	{type[Group1]="EIGHT_LEVEL",[ dead_circumflex, dead_diaeresis, VoidSymbol, VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // ^ Â¨ âŠ˜ âŠ˜ âŠ˜ âŠ˜
 key <AD12> {type[Group1]="EIGHT_LEVEL",[ dollar,          sterling,       currency,   VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // $ Â£ Â¤ âŠ˜ âŠ˜ âŠ˜
 key <RTRN> {type[Group1]="EIGHT_LEVEL",[ Return,          Return,         VoidSymbol, VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // {Enter} {F15} âŠ˜ âŠ˜ âŠ˜ âŠ˜

 // Second row (QSDFGH)
 //  <key>                                <normal>  <Shift>   <AltGr>     <S-AltGr>     <RightCtrl>  <S-RightCtrl>
 key <CAPS> {[ F13 ]};   // Will be remapped in Vim
 key <AC01>	{type[Group1]="EIGHT_LEVEL",[ q,        Q,        asciitilde,  VoidSymbol,   VoidSymbol,  VoidSymbol ]}; // q Q ~ âŠ˜ âŠ˜ âŠ˜
 key <AC02> {type[Group1]="EIGHT_LEVEL",[ s,        S,        VoidSymbol,  VoidSymbol,   VoidSymbol,  VoidSymbol ]}; // s S âŠ˜ âŠ˜ âŠ˜ âŠ˜
 key <AC03> {type[Group1]="EIGHT_LEVEL",[ d,        D,        VoidSymbol,  VoidSymbol,   U1F49A,      VoidSymbol ]}; // d D âŠ˜ âŠ˜ ðŸ’š âŠ˜
 key <AC04> {type[Group1]="EIGHT_LEVEL",[ f,        F,        VoidSymbol,  VoidSymbol,   VoidSymbol,  VoidSymbol ]}; // f F âŠ˜ âŠ˜ âŠ˜ âŠ˜
 key <AC05> {type[Group1]="EIGHT_LEVEL",[ g,        G,        VoidSymbol,  VoidSymbol,   U1F7E9,      U1F7E2     ]}; // g G âŠ˜ âŠ˜ ðŸŸ© ðŸŸ¢
 key <AC06>	{type[Group1]="EIGHT_LEVEL",[ h,        H,        numbersign,  VoidSymbol,   VoidSymbol,  VoidSymbol ]}; // h H # âŠ˜ âŠ˜ âŠ˜
 key <AC07> {type[Group1]="EIGHT_LEVEL",[ j,        J,        bar,         U25AE,        VoidSymbol,  VoidSymbol ]}; // j J | â–® âŠ˜ âŠ˜
 key <AC08>	{type[Group1]="EIGHT_LEVEL",[ k,        K,        parenleft,   parenright,   VoidSymbol,  VoidSymbol ]}; // k K ( ) âŠ˜ âŠ˜
 key <AC09>	{type[Group1]="EIGHT_LEVEL",[ l,        L,        bracketleft, bracketright, VoidSymbol,  VoidSymbol ]}; // l L [ ] âŠ˜ âŠ˜
 key <AC10> {type[Group1]="EIGHT_LEVEL",[ m,        M,        VoidSymbol,  VoidSymbol,   VoidSymbol,  VoidSymbol ]}; // m M âŠ˜ âŠ˜ âŠ˜ âŠ˜
 key <AC11> {type[Group1]="EIGHT_LEVEL",[ ugrave,   percent,  Ugrave,      VoidSymbol,   VoidSymbol,  VoidSymbol ]}; // Ã¹ % âŠ˜ âŠ˜ âŠ˜ âŠ˜
 key <BKSL> {type[Group1]="EIGHT_LEVEL",[ asterisk, mu,       VoidSymbol,  VoidSymbol,   VoidSymbol,  VoidSymbol ]}; // * Âµ âŠ˜ âŠ˜ âŠ˜ âŠ˜

 // Third row (<WXCVBN)
 // key <LFSH> {[ Shift_L ]};
 key <LSGT> {type[Group1]="EIGHT_LEVEL",[ less,      greater,    lessthanequal, greaterthanequal, U202E,      U202D      ]}; // < > â‰¤ â‰¥ {Right-To-Left Override} {Left-To-Right Override} âŠ˜ âŠ˜
 key <AB01> {type[Group1]="EIGHT_LEVEL",[ w,         W,          VoidSymbol,    VoidSymbol,       U2B1C,      U26AA      ]}; // w W âŠ˜ âŠ˜ â¬œ âšª
 key <AB02>	{type[Group1]="EIGHT_LEVEL",[ x,         X,          U2718,         VoidSymbol,       VoidSymbol, VoidSymbol ]}; // x X âœ˜ âŠ˜ âŠ˜ âŠ˜
 key <AB03> {type[Group1]="EIGHT_LEVEL",[ c,         C,          copyright,     VoidSymbol,       VoidSymbol, VoidSymbol ]}; // c C Â© âŠ˜ âŠ˜ âŠ˜
 key <AB04>	{type[Group1]="EIGHT_LEVEL",[ v,         V,          U2714,         VoidSymbol,       U1F7EA,     U1F7E3     ]}; // v V âœ” âŠ˜ ðŸŸª ðŸŸ£
 key <AB05> {type[Group1]="EIGHT_LEVEL",[ b,         B,          VoidSymbol,    VoidSymbol,       U1F7E6,     U1F535     ]}; // b B âŠ˜ âŠ˜ ðŸŸ¦ ðŸ”µ
 key <AB06> {type[Group1]="EIGHT_LEVEL",[ n,         N,          VoidSymbol,    VoidSymbol,       U2B1B,      U26AB      ]}; // n N âŠ˜ âŠ˜ â¬› âš«
 key <AB07> {type[Group1]="EIGHT_LEVEL",[ comma,     question,   U203D,         VoidSymbol,       VoidSymbol, VoidSymbol ]}; // , ? â€½ âŠ˜ âŠ˜ âŠ˜
 key <AB08> {type[Group1]="EIGHT_LEVEL",[ semicolon, period,     ellipsis,      VoidSymbol,       VoidSymbol, VoidSymbol ]}; // ; . â€¦ âŠ˜ âŠ˜ âŠ˜
 key <AB09> {type[Group1]="EIGHT_LEVEL",[ colon,     slash,      VoidSymbol,    VoidSymbol,       VoidSymbol, VoidSymbol ]}; // : / âŠ˜ âŠ˜ âŠ˜ âŠ˜
 key <AB10> {type[Group1]="EIGHT_LEVEL",[ exclam,    section,    U26A0,         VoidSymbol,       VoidSymbol, VoidSymbol ]}; // ! Â§ âš  âŠ˜ âŠ˜ âŠ˜
 key <RTSH> {type[Group1]="EIGHT_LEVEL",[ F14,       VoidSymbol, VoidSymbol,    VoidSymbol,       VoidSymbol, VoidSymbol ]}; // {F14}

 // Bottom row (Ctrl, Fn, Win, Alt, Space)
 // key <LCTL> {[ Control_L ]};
 // [SKIPPED]: Function
 // key <LWIN> {[ Super_L ]};
 // key <LALT> {[ Alt_L, Meta_L ]};
 key <SPCE>	{type[Group1]="EIGHT_LEVEL",[ space, space, UA0, U200B, U2298, VoidSymbol ]}; // {Space} {Space} Â {Non-Breaking Space} â€‹{Zero-Width Space} âŠ˜{actual âŠ˜} âŠ˜
 // key <RALT> {[ Alt_R, Meta_R ]};
 // key <RCTL> {[ Control_R ]};
 // [SKIPPED]: Fingerprint

 // Arrow keys
 key <PGUP> {[ Home  ]};
 // key <UP>   {[ Up    ]};
 key <PGDN> {[ End   ]};
 // key <LEFT> {[ Left  ]};
 // key <DOWN> {[ Down  ]};
 // key <RGHT> {[ Right ]};
};
