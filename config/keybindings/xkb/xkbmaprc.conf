// Getting to a working xkb configuration has been a long process.
//
// === The main things to know
//
// Ubuntu 24+ uses Wayland instead of X11, so xmodmap no longer works. Instead, we
// define a custom keyboard layout using xkb.
//
// Any change made to an xkb configuration is not propagated back up to Wayland.
// Instead, Gnome settings must be updated, so Wayland goes fetch the latest xkb
// config. We are using a gsettings call in the xkb deploy script for that.
//
// The evdev.xml file is a the bridge between xkb and Wayland. It defines a new
// variant to the french keyboard, called oroshi. This variant is now available
// through the Gnome UI and can be selected. Doing so forces an update of the
// running config.
//
// The evdev.xml file should be saved in ~/.config/xkb/evdev.xml. Its
// layout/configItem/name key should map to the layout it extends (here, fr for
// french). This means that the actual config file where we store our new
// mappings should be in ~/.config/xkb/symbols/fr.
//
// Now, its variant/configItem/name key should match the name of the xkb_symbols in
// this very file. The other two keys are only used for display in the UI.
//
// === References
//
// Good read on xkb actually works, mostly for a broad understanding and history
// of the thing.
// https://who-t.blogspot.com/2020/02/user-specific-xkb-configuration-part-1.html
// https://who-t.blogspot.com/2020/07/user-specific-xkb-configuration-part-2.html
// https://who-t.blogspot.com/2020/08/user-specific-xkb-configuration-part-3.html
// https://who-t.blogspot.com/2020/09/user-specific-xkb-configuration-putting.html
//
// Knowing what xkb is loading initially: stxkbmap -print
//
// List of key names:
// /usr/share/X11/xkb/keycodes/evdev
//
// You can also call "sudo evtest /dev/input/event3" to see in realtime which
// key is being pressed. Important output will start with KEY_.
// The probable real key name will ditch the KEY_, add _ between words and
// move to lowercase.
//
// List of symbols:
// Navigation:   /usr/share/X11/xkb/symbols/inet
// Alphanumeric: /usr/share/X11/xkb/symbols/fr


partial alphanumeric_keys modifier_keys
xkb_symbols "oroshi" {
 name[Group1]= "French (oroshi)";
 include "fr(basic)"
 include "level3(ralt_switch)"   // 3rd = AltGr,     4th = Shift-AltGr
 include "level5(rctrl_switch)"  // 5th = RightCtrl, 6th = Shift-RightCtrl

 // TODO: Shift Enter & Ctrl Enter in vim ?
 // TODO: Shift backspace is delete and shift delete is backspace?

 // F-row
 // key  <ESC> {[ Escape ]};
 // key <FK01> {[ F1 ]};
 // key <FK02> {[ F2 ]};
 // key <FK03> {[ F3 ]};
 // key <FK04> {[ F4 ]};
 // key <FK05> {[ F5 ]};
 // key <FK06> {[ F6 ]};
 // key <FK07> {[ F7 ]};
 // key <FK08> {[ F8 ]};
 // key <FK09> {[ F9 ]};
 // key <FK10> {[ F10 ]};
 // key <FK11> {[ F11 ]};
 // key <FK12> {[ F12 ]};
 // key <HOME> {[ Home   ]};
 // key <END>  {[ End    ]};
 // key <INS>  {[ Insert ]};
 // key <DELE> {[ Delete ]};

 // Digits
 //  <key>                               <normal>     <Shift>      <AltGr>       <S-AltGr>    <RightCtrl> <S-RightCtrl>
 key <TLDE>	{type[Group1]="EIGHT_LEVEL",[ VoidSymbol, VoidSymbol,  VoidSymbol,   VoidSymbol,  VoidSymbol,  VoidSymbol   ]}; // ⊘ ⊘ ⊘ ⊘ ⊘ ⊘
 key <AE01>	{type[Group1]="EIGHT_LEVEL",[ ampersand,  1,           VoidSymbol,   VoidSymbol,  VoidSymbol,  VoidSymbol   ]}; // & 1 ⊘ ⊘ ⊘ ⊘
 key <AE02>	{type[Group1]="EIGHT_LEVEL",[ eacute,     2,           asciitilde,   Eacute,      VoidSymbol,  VoidSymbol   ]}; // é 2 ~ É ⊘ ⊘
 key <AE03>	{type[Group1]="EIGHT_LEVEL",[ quotedbl,   3,           numbersign,   VoidSymbol,  U2665,       VoidSymbol   ]}; // " 3 # ⊘ ♥ ⊘
 key <AE04>	{type[Group1]="EIGHT_LEVEL",[ apostrophe, 4,           braceleft,    VoidSymbol,  VoidSymbol,  VoidSymbol   ]}; // ' 4 { ⊘ ⊘ ⊘
 key <AE05>	{type[Group1]="EIGHT_LEVEL",[ parenleft,  5,           bracketleft,  VoidSymbol,  VoidSymbol,  VoidSymbol   ]}; // ( 5 [ ⊘ ⊘ ⊘
 key <AE06>	{type[Group1]="EIGHT_LEVEL",[ minus,      6,           bar,          VoidSymbol,  VoidSymbol,  VoidSymbol   ]}; // - 6 | ⊘ ⊘ ⊘
 key <AE07>	{type[Group1]="EIGHT_LEVEL",[ egrave,     7,           grave,        Egrave,      VoidSymbol,  VoidSymbol   ]}; // è 7 ` È ⊘ ⊘
 key <AE08>	{type[Group1]="EIGHT_LEVEL",[ underscore, 8,           backslash,    VoidSymbol,  VoidSymbol,  VoidSymbol   ]}; // _ 8 \ ⊘ ⊘ ⊘
 key <AE09>	{type[Group1]="EIGHT_LEVEL",[ ccedilla,   9,           asciicircum,  Ccedilla,    VoidSymbol,  VoidSymbol   ]}; // ç 9 ^ Ç ⊘ ⊘
 key <AE10>	{type[Group1]="EIGHT_LEVEL",[ agrave,     0,           at,           Agrave,      VoidSymbol,  VoidSymbol   ]}; // à 0 @ À ⊘ ⊘
 key <AE11>	{type[Group1]="EIGHT_LEVEL",[ parenright, degree,      bracketright, VoidSymbol,  VoidSymbol,  VoidSymbol   ]}; // ) ° ] ⊘ ⊘ ⊘
 key <AE12>	{type[Group1]="EIGHT_LEVEL",[ equal,      plus,        braceright,   notequal,    VoidSymbol,  VoidSymbol   ]}; // = + } ≠ ⊘ ⊘
 // key <BKSP> {[  BackSpace,  BackSpace  ]};

 // First row (AZERTY)
 //  <key>                                <normal>         <Shift>         <AltGr>     <S-AltGr>    <RightCtrl>  <S-RightCtrl>
 // key  <TAB> {[ Tab, ISO_Left_Tab ]};
 key <AD01> {type[Group1]="EIGHT_LEVEL",[ a,               A,              ae,         AE,          VoidSymbol,  VoidSymbol ]}; // a A æ Æ ⊘ ⊘
 key <AD02> {type[Group1]="EIGHT_LEVEL",[ z,               Z,              VoidSymbol, VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // z Z ⊘ ⊘ ⊘ ⊘
 key <AD03> {type[Group1]="EIGHT_LEVEL",[ e,               E,              EuroSign,   VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // e E € ⊘ ⊘ ⊘
 key <AD04>	{type[Group1]="EIGHT_LEVEL",[ r,               R,              grave,      registered,  VoidSymbol,  VoidSymbol ]}; // r R ` ® ⊘ ⊘
 key <AD05> {type[Group1]="EIGHT_LEVEL",[ t,               T,              trademark,  VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // t T ™ ⊘ ⊘ ⊘
 key <AD06> {type[Group1]="EIGHT_LEVEL",[ y,               Y,              VoidSymbol, VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // y Y ⊘ ⊘ ⊘ ⊘
 key <AD07>	{type[Group1]="EIGHT_LEVEL",[ u,               U,              backslash,  mu,          VoidSymbol,  VoidSymbol ]}; // u U \ µ ⊘ ⊘
 key <AD08>	{type[Group1]="EIGHT_LEVEL",[ i,               I,              minus,      U00B7,       U2014,       VoidSymbol ]}; // i I - · — ⊘
 key <AD09>	{type[Group1]="EIGHT_LEVEL",[ o,               O,              underscore, oe,          U2298,       VoidSymbol ]}; // o O _ œ {actual ⊘} ⊘
 key <AD10>	{type[Group1]="EIGHT_LEVEL",[ p,               P,              braceleft,  braceright,  VoidSymbol,  VoidSymbol ]}; // p P { } ⊘ ⊘
 key <AD11>	{type[Group1]="EIGHT_LEVEL",[ dead_circumflex, dead_diaeresis, VoidSymbol, VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // ^ ¨ ⊘ ⊘ ⊘ ⊘
 key <AD12> {type[Group1]="EIGHT_LEVEL",[ dollar,          sterling,       currency,   VoidSymbol,  VoidSymbol,  VoidSymbol ]}; // $ £ ¤ ⊘ ⊘ ⊘
 // key <RTRN> {[ Return ]};

 // Second row (QSDFGH)
 //  <key>                                <normal>  <Shift>   <AltGr>     <S-AltGr>     <RightCtrl>  <S-RightCtrl>
 key <CAPS> {[ F13 ]}; // Will be remapped in Vim
 key <AC01>	{type[Group1]="EIGHT_LEVEL",[ q,        Q,        asciitilde,  VoidSymbol,   U1F7E6,      VoidSymbol ]}; // q Q ~ ⊘ 🟦 ⊘
 key <AC02> {type[Group1]="EIGHT_LEVEL",[ s,        S,        VoidSymbol,  VoidSymbol,   U1F7E9,      VoidSymbol ]}; // s S ⊘ ⊘ 🟩 ⊘
 key <AC03> {type[Group1]="EIGHT_LEVEL",[ d,        D,        VoidSymbol,  VoidSymbol,   U1F7E5,      VoidSymbol ]}; // d D ⊘ ⊘ 🟥 ⊘
 key <AC04> {type[Group1]="EIGHT_LEVEL",[ f,        F,        VoidSymbol,  VoidSymbol,   VoidSymbol,  VoidSymbol ]}; // f F ⊘ ⊘ ⊘ ⊘
 key <AC05> {type[Group1]="EIGHT_LEVEL",[ g,        G,        VoidSymbol,  VoidSymbol,   VoidSymbol,  VoidSymbol ]}; // g G ⊘ ⊘ ⊘ ⊘
 key <AC06>	{type[Group1]="EIGHT_LEVEL",[ h,        H,        numbersign,  VoidSymbol,   VoidSymbol,  VoidSymbol ]}; // h H # ⊘ ⊘ ⊘
 key <AC07> {type[Group1]="EIGHT_LEVEL",[ j,        J,        bar,         U25AE,        VoidSymbol,  VoidSymbol ]}; // j J | ▮ ⊘ ⊘
 key <AC08>	{type[Group1]="EIGHT_LEVEL",[ k,        K,        parenleft,   parenright,   VoidSymbol,  VoidSymbol ]}; // k K ( ) ⊘ ⊘
 key <AC09>	{type[Group1]="EIGHT_LEVEL",[ l,        L,        bracketleft, bracketright, VoidSymbol,  VoidSymbol ]}; // l L [ ] ⊘ ⊘
 key <AC10> {type[Group1]="EIGHT_LEVEL",[ m,        M,        VoidSymbol,  VoidSymbol,   VoidSymbol,  VoidSymbol ]}; // m M ⊘ ⊘ ⊘ ⊘
 key <AC11> {type[Group1]="EIGHT_LEVEL",[ ugrave,   percent,  Ugrave,      VoidSymbol,   VoidSymbol,  VoidSymbol ]}; // ù % ⊘ ⊘ ⊘ ⊘
 key <BKSL> {type[Group1]="EIGHT_LEVEL",[ asterisk, mu,       VoidSymbol,  VoidSymbol,   VoidSymbol,  VoidSymbol ]}; // * µ ⊘ ⊘ ⊘ ⊘

 // Third row (<WXCVBN)
 // key <LFSH> {[ Shift_L ]};
 key <LSGT> {type[Group1]="EIGHT_LEVEL",[ less,      greater,   lessthanequal, greaterthanequal, U202E,      U202D      ]}; // < > ≤ ≥ {Right-To-Left Override} {Left-To-Right Override} ⊘ ⊘
 key <AB01> {type[Group1]="EIGHT_LEVEL",[ w,         W,         VoidSymbol,    VoidSymbol,       VoidSymbol, VoidSymbol ]}; // w W ⊘ ⊘ ⊘ ⊘
 key <AB02>	{type[Group1]="EIGHT_LEVEL",[ x,         X,         U2718,         VoidSymbol,       VoidSymbol, VoidSymbol ]}; // x X ✘ ⊘ ⊘ ⊘
 key <AB03> {type[Group1]="EIGHT_LEVEL",[ c,         C,         copyright,     VoidSymbol,       VoidSymbol, VoidSymbol ]}; // c C © ⊘ ⊘ ⊘
 key <AB04>	{type[Group1]="EIGHT_LEVEL",[ v,         V,         U2714,         VoidSymbol,       VoidSymbol, VoidSymbol ]}; // v V ✔ ⊘ ⊘ ⊘
 key <AB05> {type[Group1]="EIGHT_LEVEL",[ b,         B,         VoidSymbol,    VoidSymbol,       VoidSymbol, VoidSymbol ]}; // b B ⊘ ⊘ ⊘ ⊘
 key <AB06> {type[Group1]="EIGHT_LEVEL",[ n,         N,         VoidSymbol,    VoidSymbol,       VoidSymbol, VoidSymbol ]}; // n N ⊘ ⊘ ⊘ ⊘
 key <AB07> {type[Group1]="EIGHT_LEVEL",[ comma,     question,  U203D,         VoidSymbol,       VoidSymbol, VoidSymbol ]}; // , ? ‽ ⊘ ⊘ ⊘
 key <AB08> {type[Group1]="EIGHT_LEVEL",[ semicolon, period,    ellipsis,      VoidSymbol,       VoidSymbol, VoidSymbol ]}; // ; . … ⊘ ⊘ ⊘
 key <AB09> {type[Group1]="EIGHT_LEVEL",[ colon,     slash,     VoidSymbol,    VoidSymbol,       VoidSymbol, VoidSymbol ]}; // : / ⊘ ⊘ ⊘ ⊘
 key <AB10> {type[Group1]="EIGHT_LEVEL",[ exclam,    section,   U26A0,         VoidSymbol,       VoidSymbol, VoidSymbol ]}; // ! § ⚠ ⊘ ⊘ ⊘
 // key <RTSH> {[ Shift_R ]};

 // Bottom row (Ctrl, Fn, Win, Alt, Space)
 // key <LCTL> {[ Control_L ]};
 // [SKIPPED]: Function
 // key <LWIN> {[ Super_L ]};
 // key <LALT> {[ Alt_L, Meta_L ]};
 key <SPCE>	{type[Group1]="EIGHT_LEVEL",[ space, space, UA0, U200B, VoidSymbol, VoidSymbol ]}; // {Space} {Space}  {Non-Breaking Space} ​{Zero-Width Space} ⊘ ⊘
 // key <RALT> {[ Alt_R, Meta_R ]};
 // key <RCTL> {[ Control_R ]};
 // [SKIPPED]: Fingerprint

 // Arrow keys
 key <PGUP> {[ Home  ]};
 // key <UP>   {[ Up    ]};
 key <PGDN> {[ End   ]};
 // key <LEFT> {[ Left  ]};
 // key <DOWN> {[ Down  ]};
 // key <RGHT> {[ Right ]};


 // // Second row
 // key <AD01>	{ [                a,                A,                   ae,                    AE ] }; // a A æ Æ
 // key <AD02>	{ [                z,                Z,          acircumflex,           Acircumflex ] }; // z Z â Â
 // key <AD03>	{ [                e,                E,             EuroSign,                  cent ] }; // e E € ¢
 // key <AD04>	{ [                r,                R,          ecircumflex,           Ecircumflex ] }; // r R ê Ê
 // key <AD05>	{ [                t,                T,                thorn,                 THORN ] }; // t T þ Þ
 // key <AD06>	{ [                y,                Y,           ydiaeresis,            Ydiaeresis ] }; // y Y ÿ Ÿ
 // key <AD07>	{ [                u,                U,          ucircumflex,           Ucircumflex ] }; // u U û Û
 // key <AD08>	{ [                i,                I,          icircumflex,           Icircumflex ] }; // i I î Î
 // key <AD09>	{ [                o,                O,                   oe,                    OE ] }; // o O œ Œ
 // key <AD10>	{ [                p,                P,          ocircumflex,           Ocircumflex ] }; // p P ô Ô
 // key <AD11>	{ [  dead_circumflex,   dead_diaeresis,           dead_tilde,        dead_abovering ] }; // ^ ¨ ˜ ˚
 // key <AD12>	{ [           dollar,         sterling,               oslash,                Oslash ] }; // $ £ ø Ø

 // // Third row
 // key <AC01>	{ [                q,                Q,           adiaeresis,            Adiaeresis ] }; // q Q ä Ä
 // key <AC02>	{ [                s,                S,               ssharp,    doublelowquotemark ] }; // s S ß „
 // key <AC03>	{ [                d,                D,           ediaeresis,            Ediaeresis ] }; // d D ë Ë
 // key <AC04>	{ [                f,                F,  leftsinglequotemark,    singlelowquotemark ] }; // f F ‘ ‚
 // key <AC05>	{ [                g,                G, rightsinglequotemark,                   yen ] }; // g G ’ ¥
 // key <AC06>	{ [                h,                H,                  eth,                   ETH ] }; // h H ð Ð
 // key <AC07>	{ [                j,                J,           udiaeresis,            Udiaeresis ] }; // j J ü Ü
 // key <AC08>	{ [                k,                K,           idiaeresis,            Idiaeresis ] }; // k K ï Ï
 // key <AC09>	{ [                l,                L,            0x1000140,             0x100013F ] }; // l L ŀ Ŀ
 // key <AC10>	{ [                m,                M,           odiaeresis,            Odiaeresis ] }; // m M ö Ö
 // key <AC11>	{ [           ugrave,          percent,           dead_acute,                Ugrave ] }; // ù % ´ Ù
 // key <BKSL>	{ [         asterisk,               mu,           dead_grave,           dead_macron ] }; // * µ ` ¯

 // // Fourth row
 // key <LSGT>  { [             less,          greater,        lessthanequal,      greaterthanequal ] }; // < > ≤ ≥
 // key <AB01>  { [                w,                W,        guillemotleft,   leftdoublequotemark ] }; // w W « “
 // key <AB02>  { [                x,                X,       guillemotright,  rightdoublequotemark ] }; // x X » ”
 // key <AB03>  { [                c,                C,            copyright,            registered ] }; // c C © ®
 // key <AB04>  { [                v,                V,            0x100202F,             leftarrow ] }; // v V ⍽ ← (espace fine insécable)
 // key <AB05>  { [                b,                B,            downarrow,               uparrow ] }; // b B ↓ ↑
 // key <AB06>  { [                n,                N,              notsign,            rightarrow ] }; // n N ¬ →
 // key <AB07>  { [            comma,         question,         questiondown,             0x1002026 ] }; // , ? ¿ …
 // key <AB08>  { [        semicolon,           period,             multiply,             0x10022C5 ] }; // ; . × ⋅
 // key <AB09>  { [            colon,            slash,             division,             0x1002215 ] }; // : / ÷ ∕
 // key <AB10>  { [           exclam,          section,           exclamdown,             0x1002212 ] }; // ! § ¡ −
};
