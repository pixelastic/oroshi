// Getting to a working xkb configuration has been a long process.
//
// === The main things to know
//
// Ubuntu 24+ uses Wayland instead of X11, so xmodmap no longer works. Instead, we
// define a custom keyboard layout using xkb.
//
// Ubuntu 24+ uses Wayland instead of X11, so xmodmap no longer works. Instead, we
// Any change made to an xkb configuration is not propagated back up to Wayland.
// Instead, Gnome settings must be updated, so Wayland goes fetch the latest xkb
// config. We are using a gsettings call in the xkb deploy script for that.
//
// Ubuntu 24+ uses Wayland instead of X11, so xmodmap no longer works. Instead, we
// The evdev.xml file is a the bridge between xkb and Wayland. It defines a new
// variant to the french keyboard, called oroshi. This variant is now available
// through the Gnome UI and can be selected. Doing so forces an update of the
// running config.
//
// Ubuntu 24+ uses Wayland instead of X11, so xmodmap no longer works. Instead, we
// The evdev.xml file should be saved in ~/.config/xkb/evdev.xml. Its
// layout/configItem/name key should map to the layout it extends (here, fr for
// french). This means that the actual config file where we store our new mappings
// should be in ~/.config/xkb/symbols/fr.
//
// Ubuntu 24+ uses Wayland instead of X11, so xmodmap no longer works. Instead, we
// Now, its variant/configItem/name key should match the name of the xkb_symbols in
// this very file. The other two keys are only used for display in the UI.
//
// === References
//
// Good read on xkb actually works, mostly for a broad understanding and history
// of the thing.
// https://who-t.blogspot.com/2020/02/user-specific-xkb-configuration-part-1.html
// https://who-t.blogspot.com/2020/07/user-specific-xkb-configuration-part-2.html
// https://who-t.blogspot.com/2020/08/user-specific-xkb-configuration-part-3.html
// https://who-t.blogspot.com/2020/09/user-specific-xkb-configuration-putting.html
//
// List of key names:
// /usr/share/X11/xkb/keycodes/evdev
//
// You can also call "sudo evtest /dev/input/event3" to see in realtime which key is being pressed.
// Important output will start with KEY_. 
// The probable real key name will ditch // the KEY_, add _ between words and
// move to lowercase.
//
// List of symbols:
// Navigation:   /usr/share/X11/xkb/symbols/inet
// Alphanumeric: /usr/share/X11/xkb/symbols/fr

partial alphanumeric_keys modifier_keys
xkb_symbols "oroshi" {
   name[Group1]= "French (oroshi)";
   include "fr(basic)"

   // Start of line / End of line
   key <PGUP> { [ Home ] };
   key <PGDN> { [ End ] };

   key <ALGR> {[  ISO_Level3_Shift  ], type[group1]="ONE_LEVEL" };

   // First row
   key <AD04>	{[ r, R, grave ]};      // r R `
   key <AD07>	{[ u, U, backslash ]};  // u U \ 
   key <AD08>	{[ i, I, minus ]};      // i I -
   key <AD09>	{[ o, O, underscore ]}; // o O _

   // Second row
   key <AC01>	{[ q, Q, asciitilde ]}; // q Q ~
   key <AC06>	{[ h, H, numbersign ]}; // h H #
   key <AC07>	{[ j, J, bar, U25AE ]}; // j J | ▮

   // Third row
   key <AB02>	{[ x, X, U2718 ]}; // x X ✘
   key <AB04>	{[ v, V, U2714 ]}; // v V ✔
   key <AB10> {[ exclam, section, U26A0 ] }; // ! § ⚠


    // // First row
    // key <TLDE>	{[      twosuperior,    threesuperior,          onesuperior,          dead_cedilla ] }; // ² ³ ¹ ¸
    // key <AE01>	{[        ampersand,                1,           dead_caron,           dead_ogonek ] }; // & 1 ˇ ˛
    // key <AE02>	{[           eacute,                2,           asciitilde,                Eacute ] }; // é 2 ~ É
    // key <AE03>	{[         quotedbl,                3,           numbersign,            dead_breve ] }; // " 3 # ˘
    // key <AE04>	{[       apostrophe,                4,            braceleft,             0x1002014 ] }; // ' 4 { — (tiret cadratin)
    // key <AE05>	{[        parenleft,                5,          bracketleft,             0x1002013 ] }; // ( 5 [ – (tiret demi-cadratin)
    // key <AE06>	{[            minus,                6,                  bar,             0x1002011 ] }; // - 6 | ‑ (tiret insécable)
    // key <AE07>	{[           egrave,                7,                grave,                Egrave ] }; // è 7 ` È
    // key <AE08>	{[       underscore,                8,            backslash,             trademark ] }; // _ 8 \ ™
    // key <AE09>	{[         ccedilla,                9,          asciicircum,              Ccedilla ] }; // ç 9 ^ Ç
    // key <AE10>	{[           agrave,                0,                   at,                Agrave ] }; // à 0 @ À
    // key <AE11>	{[       parenright,           degree,         bracketright,              notequal ] }; // ) ° ] ≠
    // key <AE12>	{[            equal,             plus,           braceright,             plusminus ] }; // = + } ±

    // // Second row
    // key <AD01>	{ [                a,                A,                   ae,                    AE ] }; // a A æ Æ
    // key <AD02>	{ [                z,                Z,          acircumflex,           Acircumflex ] }; // z Z â Â
    // key <AD03>	{ [                e,                E,             EuroSign,                  cent ] }; // e E € ¢
    // key <AD04>	{ [                r,                R,          ecircumflex,           Ecircumflex ] }; // r R ê Ê
    // key <AD05>	{ [                t,                T,                thorn,                 THORN ] }; // t T þ Þ
    // key <AD06>	{ [                y,                Y,           ydiaeresis,            Ydiaeresis ] }; // y Y ÿ Ÿ
    // key <AD07>	{ [                u,                U,          ucircumflex,           Ucircumflex ] }; // u U û Û
    // key <AD08>	{ [                i,                I,          icircumflex,           Icircumflex ] }; // i I î Î
    // key <AD09>	{ [                o,                O,                   oe,                    OE ] }; // o O œ Œ
    // key <AD10>	{ [                p,                P,          ocircumflex,           Ocircumflex ] }; // p P ô Ô
    // key <AD11>	{ [  dead_circumflex,   dead_diaeresis,           dead_tilde,        dead_abovering ] }; // ^ ¨ ˜ ˚
    // key <AD12>	{ [           dollar,         sterling,               oslash,                Oslash ] }; // $ £ ø Ø

    // // Third row
    // key <AC01>	{ [                q,                Q,           adiaeresis,            Adiaeresis ] }; // q Q ä Ä
    // key <AC02>	{ [                s,                S,               ssharp,    doublelowquotemark ] }; // s S ß „
    // key <AC03>	{ [                d,                D,           ediaeresis,            Ediaeresis ] }; // d D ë Ë
    // key <AC04>	{ [                f,                F,  leftsinglequotemark,    singlelowquotemark ] }; // f F ‘ ‚
    // key <AC05>	{ [                g,                G, rightsinglequotemark,                   yen ] }; // g G ’ ¥
    // key <AC06>	{ [                h,                H,                  eth,                   ETH ] }; // h H ð Ð
    // key <AC07>	{ [                j,                J,           udiaeresis,            Udiaeresis ] }; // j J ü Ü
    // key <AC08>	{ [                k,                K,           idiaeresis,            Idiaeresis ] }; // k K ï Ï
    // key <AC09>	{ [                l,                L,            0x1000140,             0x100013F ] }; // l L ŀ Ŀ
    // key <AC10>	{ [                m,                M,           odiaeresis,            Odiaeresis ] }; // m M ö Ö
    // key <AC11>	{ [           ugrave,          percent,           dead_acute,                Ugrave ] }; // ù % ´ Ù
    // key <BKSL>	{ [         asterisk,               mu,           dead_grave,           dead_macron ] }; // * µ ` ¯

    // // Fourth row
    // key <LSGT>  { [             less,          greater,        lessthanequal,      greaterthanequal ] }; // < > ≤ ≥
    // key <AB01>  { [                w,                W,        guillemotleft,   leftdoublequotemark ] }; // w W « “
    // key <AB02>  { [                x,                X,       guillemotright,  rightdoublequotemark ] }; // x X » ”
    // key <AB03>  { [                c,                C,            copyright,            registered ] }; // c C © ®
    // key <AB04>  { [                v,                V,            0x100202F,             leftarrow ] }; // v V ⍽ ← (espace fine insécable)
    // key <AB05>  { [                b,                B,            downarrow,               uparrow ] }; // b B ↓ ↑
    // key <AB06>  { [                n,                N,              notsign,            rightarrow ] }; // n N ¬ →
    // key <AB07>  { [            comma,         question,         questiondown,             0x1002026 ] }; // , ? ¿ …
    // key <AB08>  { [        semicolon,           period,             multiply,             0x10022C5 ] }; // ; . × ⋅
    // key <AB09>  { [            colon,            slash,             division,             0x1002215 ] }; // : / ÷ ∕
    // key <AB10>  { [           exclam,          section,           exclamdown,             0x1002212 ] }; // ! § ¡ −
};
