# Returns the path to the git root
# Usage:
# $ git-directory-root               # Path to the root
# $ git-directory-root /path/to/file # Root of the given path
# $ git-directory-root -f            # Goes all the way up submodules
# TODO: Write tests
function git-directory-root {

  zmodload zsh/zutil
  zparseopts -E -D \
    f=flagForce \
    -force=flagForce

  local isForce=${#flagForce}

  # Check from the given directory, or the current one if none specified
  local targetPath="$1"
  [[ $targetPath == "" ]] && targetPath="$PWD"
  [[ ! -d "$targetPath" ]] && targetPath="${targetPath:r}"
  [[ $targetPath[-1] != "/" ]] && targetPath+="/"

  # If path contains a .git/ folder, we remove anything after it
  if [[ $targetPath == *.git/* ]]; then
    echo ${targetPath//\/.git\/*/}
    return 0
  fi

  local gitRoot="$(cd $targetPath && git pwd)"

  # If -f is not passed, we can safely display this path
  if [[ $isForce != "1" ]]; then
    echo $gitRoot
    return 0
  fi

  # If not in a submodule, we can stop
  if ! git-is-submodule; then
    echo $gitRoot
    return 0
  fi

  # In a submodule, so we test the parent directory, recursively
  local parentDirectory="${gitRoot}/.."
  git-directory-root -f "${parentDirectory:a}"
}




