# Preview a file inside fzf
# Usage
# $ fzf-fs-shared-preview ./path/to/file                  # Display the file
# $ fzf-fs-shared-preview ./path/to/folder                # Display the folder
# $ fzf-fs-shared-preview ./file --highlight-line 42      # Highlight the specified line
# $ fzf-fs-shared-preview ./file --highlight-word "query" # Highlight the specified query
function fzf-fs-shared-preview() {
  # Parse arguments
  zmodload zsh/zutil
  zparseopts -E -D \
    -highlight-line:=flagHighlightLine \
    -highlight-query:=flagHighlightQuery \

  # Get full path of file to preview
  local fullPath="$1"
  fullPath=${~fullPath}

  # Cleanup previously displayed image
  img-display --clear
  fzf-fs-shared-preview-header "$fullPath"

  # Directory {{{
  if [[ -d $fullPath ]]; then
    l "$fullPath"
    return 0
  fi
  # }}}
  

  local filetypeGroup="$(filetype-group $fullPath)"
  local extension=${fullPath:e}

  # Image display
  if [[ $filetypeGroup == "image" ]]; then
    img-display --no-metadata --fzf-preview $fullPath
    return 0
  fi

  # Document preview (pdf, epub, mobi)
  if [[ $filetypeGroup == "document" ]]; then
    local previewCacheFolder="/tmp/oroshi/fzf/previews/"
    local previewCacheHash=$(file-hash $fullPath);
    local previewCachePath="${previewCacheFolder}/${previewCacheHash}.png"

    # Create the cover in tmp if none exist
    if [[ ! -f $previewCachePath ]]; then
      mkdir -p $previewCacheFolder

      # For pdf, we extract the first page
      if [[ $extension == "pdf" ]]; then
        convert "${fullPath}[0]" $previewCachePath
        png-trim $previewCachePath
      fi
      # For ebooks, we extract the cover
      if [[ $extension == "epub" || $extension == "mobi" ]]; then
        ebook-cover-extract "$fullPath" $previewCachePath
      fi
    fi

    img-display --no-metadata --fzf-preview $previewCachePath
    return 0
  fi

  # Text preview
  local highlightLine=${flagHighlightLine[2]}
  local highlightQuery=${flagHighlightQuery[2]}

  local lineRangeMin=0
  local lineRangeMax=50
  local contextSize=4

  # If a specific line is passed, we highlight it and the context around only
  if [[ $highlightLine != "" ]]; then
    local lineRangeMin=$(($highlightLine - $contextSize))
    [[ $lineRangeMin -lt 0 ]] && lineRangeMin=0
    local lineRangeMax=$(($highlightLine + $contextSize))
    local highlightFlag="--highlight-line $highlightLine"
  fi

  # Display file
  local output="$(bat \
    --paging=never \
    --style=numbers \
    --color=always \
    ${=highlightFlag} \
    --line-range $lineRangeMin:$lineRangeMax \
    $fullPath
  )"

  # If no query passed, we display it like this
  if [[ $highlightQuery == "" ]]; then
    echo $output
    return 0
  fi

  # We highlight the query
  rg \
    --no-line-number \
    "$highlightQuery" \
    <<< "$output"
}

