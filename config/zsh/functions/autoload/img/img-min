# Compress images using lossy algorithm, but without reducing perceived
# perception too much
# Usage:
# $ img-min ./path/to/file.png               # Overwrites file
# $ img-min ./path/to/file.png ./other.jpg   # Overwrites files
function img-min() {
	local inputs=($@)

	# Configuration
	local maxDifference=0.001
	local initialQuality=60

	# Setup
	local tmpDir=/tmp/oroshi/img-min
	mkdir -p $tmpDir

	# compressPNG {{{
	# Compress a PNG file to the given quality, and returns the path to the
	# converted file
	function compressPNG() {
		local filepath=$1
		local quality=$2

		pngquant \
			$filepath \
			--quality=0-${quality} \
			--ext="-${quality}.png" \
			--floyd=1 \
			--strip

		echo "${filepath:r}-${quality}.png"
	}
	# }}}

	# compressJPG {{{
	# Compress a JPG file to the given quality, and returns the path to the
	# converted file
	function compressJPG() {
		local filepath=$1
		local quality=$2
		local outputFile="${filepath:r}-${quality}.jpg"

		jpegoptim \
			--quiet \
			--preserve \
			--force \
			--strip-all \
			--all-progressive \
			--max=${quality} \
			--stdout \
			$filepath \
			>$outputFile

		echo $outputFile
	}
	# }}}

	# Test all qualities until finding the one with a small dssim difference
	function findOptimalQuality() {
		local filepath=$1
		local currentQuality=$2
		local extension=${filepath:e:l}

		# Compress the file to the specified quality and get the path to the
		# converted path
		local currentFile=""
		[[ $extension == "png" ]] && currentFile="$(compressPNG $filepath $currentQuality)"
		[[ $extension == "jpg" ]] && currentFile="$(compressJPG $filepath $currentQuality)"
		if [[ $currentFile == "" ]]; then
			echo "âœ˜ ${extension} files not supported, skipping"
			return
		fi

		# Get the difference with original
		local currentDifference="$(dssim $filepath $currentFile | awk '{print $1}')"
		echo "Testing quality $currentQuality, $currentDifference difference"

		# We narrow down the quality interval we need to test:
		# If it's too different, it means we shouldn't lower quality more
		# If it's not enough different, it means we shouldn't increase quality more
		local differenceIsTooBig="$(echo "$currentDifference > $maxDifference" | bc)"
		if [[ $differenceIsTooBig == "1" ]]; then
			QUALITY_MIN=$currentQuality
		else
			QUALITY_MAX=$currentQuality
		fi

		# We stop if:
		# - we had the same difference twice in a row, meaning further optimization
		# won't change the perceived quality, so let's not waste cycles
		# - there are no more values to test, the last one is good enough
		local sameDifferenceTwiceInARow=0
		[[ $OPTIMAL_DIFFERENCE == "$currentDifference" ]] && sameDifferenceTwiceInARow=1
		local noMoreValuesToTest="$(echo "$QUALITY_MAX - $QUALITY_MIN == 1" | bc)"
		if [[ $sameDifferenceTwiceInARow == "1" || $noMoreValuesToTest == "1" ]]; then
			return
		fi

		# We save the current values as the best we could find (so far)
		OPTIMAL_QUALITY=$currentQuality
		OPTIMAL_FILE=$currentFile
		OPTIMAL_DIFFERENCE=$currentDifference

		# Here we go again, one more turn with the next quality
		local nextQuality="$(getNextQuality)"
		findOptimalQuality $filepath $nextQuality
	}

	# Returns the next quality to test
	# This takes the middle of the current boundaries we currently have
	function getNextQuality() {
		echo "$QUALITY_MIN + ($QUALITY_MAX - $QUALITY_MIN) / 2" | bc
	}

	# Cleanup any leftover files of a given uuid
	# Note: (N) prevents a zsh warning if the glob does not match anything
	function cleanupFiles() {
		local uuid=$1
		local leftoverFiles=(${tmpDir}/${uuid}*(N))
		[[ $leftoverFiles == "" ]] && return
		rm -f $leftoverFiles
	}

	# Mark a file as already compressed by adding a metadata comment
	function markAsAlreadyCompressed() {
		local filepath=$1
		exiftool \
			-quiet \
			-overwrite_original \
			-Comment="oroshi_compressed" \
			$filepath
	}

	# For each file passed as input
	for input in $inputs; do
		local originalFile=${input:a}
		local extension=${originalFile:e:l}
		echo "Compressing ${originalFile:t}"

		# Stop if file has already been compressed
		if img-is-compressed $originalFile; then
			echo "Already compressed"
			continue
		fi

		# Cleanup any leftover files from previous runs
		local uuid="$(md5 $originalFile)"
		cleanupFiles $uuid

		# We work on a copy of the original file
		local alphaFile="${tmpDir}/${uuid}.${extension}"
		echo "Copy $originalFile to $alphaFile"
		cp $originalFile $alphaFile

		# Global variables we'll be playing with until we find the optimal quality
		local QUALITY_MIN=0
		local QUALITY_MAX=100
		local OPTIMAL_QUALITY=''
		local OPTIMAL_FILE=''
		local OPTIMAL_DIFFERENCE=''

		# Find the best quality in CURRENT_QUALITY
		findOptimalQuality $alphaFile $initialQuality

		# Add a comment to the file to flag it as already compressed
		markAsAlreadyCompressed $OPTIMAL_FILE

		# Overwrite the source file with the new file
		mv -f $OPTIMAL_FILE $originalFile

		# Remove our previously created files
		cleanupFiles $uuid
	done

}
