# Display a raw table of all dependencies
# Usage:
# $ yarn-dependency-list-raw                     # Only regular dependencies
# $ yarn-dependency-list-raw --dev               # Only dev dependencies
# $ yarn-dependency-list-raw --all               # All dependencies
# $ yarn-dependency-list-raw --with-descriptions # Add a last description colum
# $ yarn-dependency-list-raw ./path/to/project   # List dependencies of another project
function yarn-dependency-list-raw() {
  zparseopts -E -D \
    -dev=flagDev \
    -all=flagAll \
    -with-descriptions=flagWithDescriptions

  local isDev=${#flagDev}
  local isAll=${#flagAll}
  local isWithDescriptions=${#flagWithDescriptions}

  # Check in current directory, unless a directory is passed
  local projectRoot=${1:-$PWD}

  # Stop if no package.json
  local packageJsonPath="$(find-up --root $projectRoot package.json)"
  [[ $packageJsonPath == "" ]] && return 0

  # Get either the dependencies, devDependencies, or both
  local includeDependencies="1"
  local includeDevDependencies="0"
  if [[ $isDev == "1" ]]; then
    includeDependencies="0"
    includeDevDependencies="1"
  fi
  if [[ $isAll == "1" ]]; then
    includeDependencies="1"
    includeDevDependencies="1"
  fi

  # Store information about each dependency in its own hash
  local dependencyNames=()
  typeset -A dependencyVersions=()
  typeset -A dependencyPaths=()
  typeset -A dependencyTypes=()
  typeset -A dependencyLinkTypes=()
  typeset -A dependencyDescriptions=()

  # jq invocation to get dependencies of a given field
  function getRawDependencies() {
    local key=$1
    jq \
      --raw-output \
      ".${key} | to_entries[] | [.key, .value, \"$key\"] | join(\"▮\")" \
      <$packageJsonPath \
      2>/dev/null
  }

  # Pick either dependencies, devDependencies or both
  local rawDependencies=()
  [[ $includeDependencies == "1" ]] && rawDependencies+=($(getRawDependencies "dependencies"))
  [[ $includeDevDependencies == "1" ]] && rawDependencies+=($(getRawDependencies "devDependencies"))

  [[ $rawDependencies == "" ]] && return 0

  # Default pass, to fill the list of dependencies and version
  for rawDependency in ${rawDependencies}; do
    local splitLine=(${(@s/▮/)rawDependency})
    local dependencyName=$splitLine[1]
    local dependencyVersion=$splitLine[2]
    local dependencyType=$splitLine[3]

    dependencyNames+=($dependencyName)
    dependencyVersions[$dependencyName]=$dependencyVersion
    dependencyTypes[$dependencyName]=$dependencyType
  done

  # Get descriptions
  if [[ $isWithDescriptions == "1" ]]; then
    # Get all dependency paths
    for dependencyName in $dependencyNames; do
      dependencyPaths[$dependencyName]="${packageJsonPath:h}/node_modules/${dependencyName}/"
    done

    local rawDependencyDescriptions="$(yarn-package-description $dependencyPaths)"
    for rawDependencyDescription in ${(f)rawDependencyDescriptions}; do
      local split=(${(s/▮/)rawDependencyDescription})
      local dependencyName=$split[1]
      local dependencyDescription=$split[2]
      dependencyDescriptions[$dependencyName]=$dependencyDescription
    done
  fi

  # Get list of all links, and mark those dependencies as such
  local rawLinkList="$(yarn-link-list-raw)"
  for rawLinkLine in ${(f)rawLinkList}; do
    local split=(${(@s/▮/)rawLinkLine})
    local dependencyName=$split[1]
    local dependencyLinkType=$split[2]
    dependencyLinkTypes[$dependencyName]="link-${dependencyLinkType}"
  done

  # Display the full list
  for dependencyName in ${dependencyNames}; do
    local dependencyVersion=$dependencyVersions[$dependencyName]
    local dependencyDescription=$dependencyDescriptions[$dependencyName]
    local dependencyType=$dependencyTypes[$dependencyName]
    local dependencyLinkType=$dependencyLinkTypes[$dependencyName]
    [[ $dependencyLinkType == "" ]] && dependencyLinkType="link-none"

    echo "${dependencyName}▮${dependencyVersion}▮${dependencyType}▮${dependencyLinkType}▮${dependencyDescription}"
  done
}
