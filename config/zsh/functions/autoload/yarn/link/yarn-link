# Link a local module to be used in place of a dependency
#
# Note that the behavior of the raw `yarn link` command changed between Yarn Classic
# (v1) and Yarn Berry (v2+). In Classic, one needed to "register" a module for
# linking, then linking it. In Berry, one only need to pass the path to the
# module.
#
# Berry DX is clearly better, but the implementation is worse. For once, it does
# change the content of package.json to reflect this linking mechanism, while
# this is something I don't want to commit and keep local.
#
# This script and its siblings are a way to abstract the differences between
# Classic and Berry under a common DX API.
#
# Usage:
# $ yarn-link ../path/to/aberlaas-monorepo/lib   # Uses local version of aberlaas instead of dependency
# $ yarn-link ../path/to/one ../path/to/two      # Link several modules at once
function yarn-link() {
	local inputPaths=($@)
	local yarnIsBerry="1"
	yarn-version-is-classic && yarnIsBerry="0"

	for modulePath in $inputPaths; do
		modulePath="${modulePath:a}"

		# If we're using Yarn Classic (v1), it has it's own flow
		# 1. Register the destination in the list of linkable modules
		# 2. Actually link the source to the destination
		if [[ $yarnIsBerry == "0" ]]; then
			local moduleName="$(yarn-package-name "$modulePath")"

			yarn-link-classic-create $modulePath
			yarn-link-classic-enable $moduleName
			continue
		fi

		# If using Yarn Berry (v2+), we only need to pass the path to the linked
		# module. We will create all the required symlinks
		yarn-link-create $modulePath
	done
}
