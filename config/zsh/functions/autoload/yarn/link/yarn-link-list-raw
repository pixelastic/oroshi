# Return a raw list of all the linked yarn modules
# Usage:
# $ yarn-link-list-raw                          # List of local modules with moduleName▮type▮
# $ yarn-link-list-raw --with-descriptions      # List of moduleName▮type▮descriptions
# $ yarn-link-list-raw --include-workspace-root # Include links in the workspace root
# $ yarn-link-list-raw --global                 # List of global modules
function yarn-link-list-raw() {
  # Stop if yarn not available
  [[ ! $commands[yarn] ]] && return 1

  zparseopts -E -D \
    -global=flagGlobal \
    -with-descriptions=flagWithDescriptions \
    -include-workspace-root=flagIncludeWorkspaceRoot

  local isGlobal=${#flagGlobal}
  local isWithDescriptions=${#flagWithDescriptions}
  local includeWorkspaceRoot=${#flagIncludeWorkspaceRoot}


  # Variables to fill
  local moduleNames=()
  typeset -A moduleTypes=()
  typeset -A moduleDescriptions=()
  typeset -A modulePaths=()

  # populateLocalLinkList {{{
  # Populate the module variables with values from the locally linked modules
  function populateLocalLinkList() {
    # This prevents zsh from displaying a warning if the node_modules/@* does not
    # match anything
    setopt +o nomatch

    # We look for modules from the root, or the passed argument
    local packageRoot="${1:-$(yarn-root)}"
    local node_modules="${packageRoot}/node_modules"
    local linkedModules="$(find \
        $node_modules \
        $node_modules/@* \
        -maxdepth 1 \
        -type l \
        -printf "%f:%l\n" \
        2>/dev/null \
    | sort)"


    # Find types of each module
    for rawLine in ${(f)linkedModules}; do
      local split=(${(s/:/)rawLine})
      local moduleName=$split[1]
      local modulePath=$split[2]
      if [[ $modulePath[1] == '.' ]]; then
        modulePath="${node_modules}/${split[2]}"
        modulePath=${modulePath:a}
      fi

      # Check if local or global module
      local moduleType='global'
      [[ $modulePath == ${packageRoot}* ]] && moduleType='local'

      moduleNames+=($moduleName)
      modulePaths[$moduleName]=$modulePath
      moduleTypes[$moduleName]=$moduleType
    done
  }
  # }}}
  # populateGlobalLinkList {{{
  # Populate the module variables with values from the globally available modules
  function populateGlobalLinkList() {
    local linkDirectory=~/.config/yarn/link

    # Getting all module names
    for rawLink in ${linkDirectory}/*; do
      local moduleName=${rawLink:t}

      # Without namespace
      if [[ $moduleName != @* ]]; then
        moduleNames+=($moduleName)
        continue
      fi

      # With namespace
      for rawSubLink in ${linkDirectory}/${moduleName}/*; do
        local submoduleName=${rawSubLink:t}
        moduleNames+=(${moduleName}/${submoduleName})
      done
    done

    # Saving their type and path
    for moduleName in $moduleNames; do
      moduleTypes[$moduleName]="global"
      modulePaths[$moduleName]="${linkDirectory}/${moduleName}"
    done
  }
  # }}}

  # Get the list either from locally linked modules, or globally available
  [[ $isGlobal == "0" ]] && populateLocalLinkList
  [[ $isGlobal == "1" ]] && populateGlobalLinkList

  # If --include-workspace-root, we also add the local modules from the root
  if [[ $isGlobal == "0" && $includeWorkspaceRoot == "1" ]]; then
    if ! yarn-is-workspace-root; then
      local workspaceRoot="$(yarn-root --force)"
      populateLocalLinkList $workspaceRoot
    fi
  fi

  # Stop if no module linked
  [[ ${moduleNames} == "" ]] && return 0

  # Find description of all modules
  if [[ $isWithDescriptions == "1" ]]; then
    local rawModuleDescriptions="$(yarn-package-description $modulePaths)"
    for rawModuleDescription in ${(f)rawModuleDescriptions}; do
      local split=(${(s/▮/)rawModuleDescription})
      local moduleName=$split[1]
      local moduleDescription=$split[2]
      moduleDescriptions[$moduleName]=$moduleDescription
    done
  fi

  # Output the results
  for moduleName in ${(o)moduleNames}; do
    local moduleType=$moduleTypes[$moduleName]
    local moduleDescription=$moduleDescriptions[$moduleName]
    echo "${moduleName}▮${moduleType}▮${moduleDescription}"
  done

  return 0
}
