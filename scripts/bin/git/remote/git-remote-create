#!/usr/bin/env zsh
# Create a new remote
# Usage:
# $ git-remote-create pixelastic {url} # Create a new remote pointing to the 
#                                      # specified url
# $ git-remote-create pixelastic       # Create a new remote pointing to 
#                                      # pixelastic user instead of the existing
#                                      # GitHub user
set -e

local remoteName="$1"
local remoteUrl="$2"

# A remote name is needed
if [[ "$remoteName" == "" ]]; then
  echo "âœ˜ You must pass the name of the remote"
  exit 1
fi

# If not url is passed, we assume it's a GitHub fork, where the remote name is
# the name of the fork user
if [[ "$remoteUrl" == "" ]]; then
  remoteUrl="$(git-remote-url)"
  # Works for ssh
  remoteUrl="$(echo $remoteUrl | sed -e "s_git@github.com:\(.*\)/\(.*\).git_git@github.com:${remoteName}\/\2.git_g")"

  # And for https, we convert to ssh because it's better
  remoteUrl="$(echo $remoteUrl | sed -e "s_https://github.com/\(.*\)/\(.*\).git_git@github.com:${remoteName}\/\2.git_g")"
fi

git remote add "$remoteName" "$remoteUrl"
# We also set pruning of this remote to true, so whenever we fetch it, it
# updates the local cache of remote branches
git config "remote.${remoteName}.prune" true

local displayRemoteName="$(git-remote-colorize "$remoteName" --with-icon)"
echo "Remote $displayRemoteName created"
