#!/usr/bin/env zsh
# Wrapper of textlint to be used by ALE in vim. This will internally call either
# textlint-ale-lint or textlint-ale-fix depending on the usage
#
# Usage (Lint):
# $ textlint-ale \
#   -f json \
#   --stdin \
#   --stdin-filename '/path/to/original/file.md' \
#   < '/path/to/tmp/file.md'

# Usage (Fix):
# $ textlint-ale \
#   --fix \
#   '/path/to/tmp/file.md'
#
# textlint reads its config from .textlinrc files, recursively up the tree.
# There doesn't seem to have a way to define a textlintrc file to use
# specifically from the commandline, so we'll put all our config in a custom dir
# and run textlint from there
set -e

# We parse the options
zparseopts -E -D \
	-stdin-filename:=flagStdinFilename \
	-fix=flagFix

local isFix=${#flagFix}
local stdinFilename=${flagStdinFilename[2]}

# Global variables
local sandbox=/tmp/oroshi/textlint
local iroriFolder=~/local/www/projects/irori
local textlintBin="${iroriFolder}/node_modules/.bin/textlint"

# Create the sandbox folder
mkdir -p $sandbox

# Add the config
local textlintrcPath="${iroriFolder}/lib/configs/textlintrc.js"
ln -fs $textlintrcPath "${sandbox}/.textlintrc.js"
local terminologyPath="${iroriFolder}/lib/configs/terminology.json"
ln -fs $terminologyPath ${sandbox}

# Run a different subcommand if lint or fix
cd $sandbox
if [[ $isFix == "1" ]]; then
	# ALE creates a temporary copy of the file, so we'll execute the fix on it
	local input=${1:a}
	${textlintBin} --fix "$input"
else
	# We'll execute the lint directly on the file being edited
	local input=$stdinFilename
	${textlintBin} -f json --stdin --stdin-filename "$input" <$input
fi
