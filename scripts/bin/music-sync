#!/usr/bin/env ruby
require 'fileutils'
require 'shellwords'

# Grabs all directories marked with a .musicmark file in the specified folder
# and copy them to destination
class MusicSync
  def initialize(*args)
    if args.include?('-n')
      args.delete('-n')
      @is_dry_run = true
    end

    @dest = File.expand_path(args[-1])
    unless valid_dir?(@dest)
      puts "#{@dest} is not a valid directory"
      exit 1
    end

    @src = marked_dirs(args[0..-2])
    if @src.empty?
      puts 'No directories found with a .musicmark file in it'
      exit 1
    end
  end

  # Gets a list of all directories that have a .musicmark file in it
  def marked_dirs(inputs)
    output = []
    # We take al the .musicmark path in those folders
    inputs.each do |input|
      input = File.expand_path(input)
      next unless valid_dir?(input)
      marked_files = Dir["#{input}/**/.musicmark"]
      next if marked_files.empty?
      output += marked_files.map { |file| File.dirname(file) }
    end

    output
  end

  # Check that the directory exists and is a directory
  def valid_dir?(path)
    File.exist?(path) && File.directory?(path)
  end

  # Return the path to the local musicroot, relative to any passed dir
  def musicroot(dir)
    return dir if File.exist?(File.join(dir, '.musicroot'))
    musicroot(File.dirname(dir))
  end

  def copy_dir(src)
    # Add trailing slash
    src += '/' if src[-1] != '/'

    # Create the destination folder
    relative_path = src.gsub(/^#{musicroot(src)}/, '.')
    puts "Copying #{relative_path}"
    dest_path = File.expand_path(File.join(@dest, relative_path))
    FileUtils.mkdir_p(dest_path)

    rsync_options = [
      '--verbose',
      '--archive',
      '--recursive',
      '--times',
      '--modify-window=1',
      '--prune-empty-dirs',
      "--filter='+s */'",
      "--filter='+s *.mp3'",
      "--filter='-s *'"
    ]
    rsync_options << '--dry-run' if @is_dry_run

    command = [
      'rsync',
      rsync_options.join(' '),
      src.shellescape,
      dest_path.shellescape
    ].join(' ')

    IO.popen(command).each do |line|
      puts line.chomp
    end
  end

  def run
    @src.each do |path|
      copy_dir(path)
    end
  end
end
MusicSync.new(*ARGV).run
