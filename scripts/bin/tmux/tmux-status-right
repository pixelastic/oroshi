#!/usr/bin/env zsh
# Used in tmux, to display the right topbar
# Note: This script is called regularly (every 5-10 seconds). It needs to be
# fast, so we inline most of the code to avoid spawning subshells.
# It also won't inherit any zshrc configuration, only what is defined in
# zshenv.
#
# We will read the content of the status bar from files on disk, and only
# regenerate those files at regular intervals (which will be longer intervals
# than the refresh rate).

source ~/.oroshi/config/zsh/theming/env/colors.zsh

# Where to save the parts
local STATUS_SAVE_PATH="/tmp/oroshi/tmux"
mkdir -p $STATUS_SAVE_PATH

# Refresh frequency for each part, in seconds
typeset -A STATUS_FREQUENCY=(
	spotify 5
	battery 60
	cpu 30
	ram 30
	ping 30
	clock 60
	dropbox 300
)

# In which order to display the various parts
local STATUS_ORDER=(
	spotify
	battery
	cpu
	ram
	ping
	clock
	dropbox
)

# Spotify {{{
function tmux-generate-status:spotify() {
	if sp current | grep --silent "Error: Spotify is not running"; then
		return
	fi

	eval "$(sp eval)"
	local currentTitle="$SPOTIFY_ARTIST - $SPOTIFY_TITLE"

	[[ "${#currentTitle}" -gt 40 ]] && currentTitle="${currentTitle:1:40}…"
	echo "#[fg=colour${COLOR_ALIAS_SUCCESS}] ${currentTitle}#[default]"
}
# }}}
# Battery {{{
# Do not display if full
# Display in green if charging
# Display in grey, yellow and red when level drops
function tmux-generate-status:battery() {
	local batteryDevice="$(upower -e | grep BAT)"
	local batteryStatus="$(
		upower -i ${batteryDevice} |
			grep state |
			awk '{print $2}'
	)"
	local batteryPercent="$(
		upower -i ${batteryDevice} |
			grep percentage |
			awk '{print $2}' |
			sed 's/.$//'
	)"
	local batteryDuration="$(
		upower -i ${batteryDevice} |
			grep 'time to empty' |
			awk '{print $4}'
	)"

	[[ $batteryPercent -gt 99 ]] && return

	if [[ $batteryStatus == 'charging' ]]; then
		echo "#[fg=colour${COLOR_ALIAS_SUCCESS}] ${batteryPercent}%#[default]"
		return
	fi

	local batteryDisplay="${batteryPercent}% (${batteryDuration}h)"
	if [[ $batteryPercent -lt 100 && $batteryPercent -ge 50 ]]; then
		echo "#[fg=colour${COLOR_ALIAS_COMMENT}]  ${batteryDisplay}#[default]"
	fi
	if [[ $batteryPercent -lt 50 && $batteryPercent -ge 10 ]]; then
		echo "#[fg=colour${COLOR_ALIAS_WARNING}]  ${batteryDisplay}#[default]"
	fi
	if [[ $batteryPercent -lt 10 ]]; then
		echo "#[fg=colour${COLOR_ALIAS_ERROR},bold]  ${batteryDisplay}#[default]"
	fi
}
# }}}
# CPU usage {{{
# Display in green / yellow / red based on % usage
function tmux-generate-status:cpu() {
	local cpuUsed="$(
		grep 'cpu ' /proc/stat |
			awk '{print ($2+$4)*100/($2+$4+$5)}' |
			cut --delimiter "." --fields 1
	)"
	if [[ $memoryUsed -gt 80 ]]; then
		echo "#[fg=colour${COLOR_ALIAS_WARNING}] ${cpuUsed}%#[default]"
		return
	fi
	if [[ $memoryUsed -gt 50 ]]; then
		echo "#[fg=colour${COLOR_ALIAS_ERROR}] ${cpuUsed}%#[default]"
	fi
}
# }}}
# RAM usage {{{
# Display in green / yellow / red based on % usage
function tmux-generate-status:ram() {
	local memoryUsed="$(
		free -m |
			grep Mem |
			awk '{print $3/$2 * 100}' |
			cut --delimiter "." --fields 1
	)"

	if [[ $memoryUsed -gt 80 ]]; then
		echo "#[fg=colour${COLOR_RED}] ${memoryUsed}%#[default]"
		return
	fi
	if [[ $memoryUsed -gt 50 ]]; then
		echo "#[fg=colour${COLOR_YELLOW}] ${memoryUsed}%#[default]"
	fi
}
# }}}
# Ping {{{
function tmux-generate-status:ping() {
	if ! is-online; then
		echo "#[fg=colour${COLOR_ALIAS_ERROR},bold]offline#[default]"
		return
	fi

	local pingRawPath="${STATUS_SAVE_PATH}/ping-raw"

	# We build the final display based on the raw ping value
	if [[ -f $pingRawPath ]]; then
		local ping="$(cat ${pingRawPath})"
		local output=""
		[[ $ping -lt 230 ]] && output="#[fg=colour${COLOR_ALIAS_ERROR}] ${ping}ms#[default]"
		[[ $ping -lt 160 ]] && output="#[fg=colour${COLOR_ALIAS_WARNING}] ${ping}ms#[default]"
		[[ $ping -lt 80 ]] && output="#[fg=colour${COLOR_ALIAS_NOTICE}] ${ping}ms#[default]"
		echo $output
	fi

	# We start an asynchronous process to fill the raw ping value for next call
	# Note: If the ping part frequency is shorter than the ping time, the
	# displayed ping might be empty
	ping \
		-c 5 \
		8.8.8.8 |
		tail -1 |
		awk '{print $4}' |
		cut --delimiter "/" --fields 2 |
		awk '{printf("%d\n",$1 + 0.5)}' \
			>"${pingRawPath}" &
}
# }}}
# Clock {{{
function tmux-generate-status:clock() {
	local clock="$(date +'%d/%m %H:%M')"
	echo "#[fg=colour${COLOR_ALIAS_DATE}] $clock#[default]"
}
# }}}
# Dropbox {{{
function tmux-dropbox-is-running() {
	[[ ! $commands[dropbox] ]] && return 1
	dropbox status 2>/dev/null |
		grep \
			--quiet \
			"Dropbox isn't running\!\|Syncing paused" &&
		return 1 ||
		return 0
}
function tmux-generate-status:dropbox() {
	tmux-dropbox-is-running &&
		echo "#[fg=colour${COLOR_ALIAS_COMMENT}] #[default]" ||
		echo "#[fg=colour${COLOR_ALIAS_ERROR}] #[default]"
}
# }}}

# Build the output
local output=()
for partName in ${STATUS_ORDER}; do
	# Check for a recent file that could contain our status. If we can't find
	# a recent enough file, we regenerate a new one
	local filePath="${STATUS_SAVE_PATH}/${partName}"
	local fileFrequency=${STATUS_FREQUENCY[$partName]}

	# Generate the file if either missing or too old
	local shouldRegenerate="0"
	[[ -n ${filePath} ]] && shouldRegenerate="1"
	find \
		${filePath} \
		-type f \
		-newermt "${fileFrequency} seconds ago" \
		&>/dev/null ||
		shouldRegenerate="1"
	[[ $shouldRegenerate == "1" ]] && tmux-generate-status:${partName} >${filePath}

	local fileContent="$(cat ${filePath})"

	output+=("${fileContent}")
done
echo $output
