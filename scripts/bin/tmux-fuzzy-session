#!/usr/bin/env ruby
# frozen_string_literal: true

# Allow finding of a specific session through fuzzy matching
class TmuxFuzzySession
  # We read the list of all sessions/windows and build a displayable list out of
  # it
  # We also keep in memory the hash that matches a selected line with its
  # session/window
  def initialize
    items = `tmux list-windows -a -F "#S:#W"`

    # Quickly find the longest session name for aligning
    session_width = 0
    items.each_line do |item|
      length = item.strip.split(':')[0].length
      session_width = [session_width, length].max
    end

    # Build the displayed list and reverse list
    list = []
    @icons = {}
    @reverse_list = {}
    items.each_line do |item|
      session_name, window_name = item.strip.split(':')

      session_icon = icon(session_name)

      window_icon = icon(window_name)

      session_prefix = "#{session_icon} #{session_name}".ljust(session_width + 2, ' ')

      display_line = "#{session_prefix} î‚± #{window_icon} #{window_name}"
      list << display_line

      normalized_line = display_line.strip
      @reverse_list[normalized_line] = {
        session: session_name,
        window: window_name
      }
    end
    @list = list.join("\n")
  end

  # Ask for a fzf selection, then move to the specified session/window
  def run
    # Make it full screen if not yet full screen
    need_zoom = !system('tmux-is-zoomed')
    `tmux resize-pane -Z` if need_zoom

    raw_selection = select_window
    return unless raw_selection

    detailed_selection = @reverse_list[raw_selection]

    `tmux switch -t #{detailed_selection[:session]}:#{detailed_selection[:window]}`

    # Revert the full screen if we changed it before
    `tmux resize-pane -Z` if need_zoom
  end

  # Use a custom local version of fzf with all options configured
  # As this will be loaded from TMUX, it won't inherit the ENV variables by
  # default which is why we need to pass them
  def fzf_tmux_bin
    '/home/tim/.oroshi/scripts/bin/tmux-fuzzy-session-fzf'
  end

  # Is there an icon for this session/window?
  def icon(target)
    @icons[target] = `~/.oroshi/scripts/bin/tmux-status-icon #{target}`.strip unless @icons.key?(target)
    return ' ' if @icons[target].empty?

    @icons[target]
  end

  # Display the fzf list and ask for selection
  def select_window
    selection = `echo "#{@list}" | #{fzf_tmux_bin}`.strip
    return false if selection.empty?

    selection
  end
end
TmuxFuzzySession.new.run
