#!/usr/bin/env zsh
# Preview a file or directory inside fzf
# Usage
# $ fzf-preview ./path/to/directory             # Display the directory
# $ fzf-preview " x oroshi  scripts/install"   # Understands known projects

# Parse arguments
zmodload zsh/zutil
zparseopts -E -D \
  -highlight-line:=flagHighlightLine \
  -highlight-query:=flagHighlightQuery \

local highlightLine=${flagHighlightLine[2]}
local highlightQuery=${flagHighlightQuery[2]}

# Get full path of file to preview
local fullPath="$1"

# Parse project shortform paths
# Example: "   perso/Dropbox/backup/pictures/2022"
if [[ $fullPath == ** ]]; then
  local shortformSplit=(${(@s//)fullPath})
  
  # Parsing the path inside the project
  local pathSuffix=$shortformSplit[2]
  pathSuffix=(${=pathSuffix})

  # Parsing the project part
  local rawProject=$shortformSplit[1]
  local projectSplit=(${=rawProject})
  local projectName=$projectSplit[2]
  [[ $projectName == "" ]] && projectName="home"
  local projectKey=${projectName:u}
  local projectPath=${(P)${:-PROJECT_${projectKey}_PATH}}
  fullPath="${projectPath}${pathSuffix}"
fi

[[ $fullPath[1] == "~" ]] && fullPath=${~fullPath}
[[ $fullPath[1] != "/" ]] && fullPath="${PWD}/${fullPath}"

# Display directory listing
if [ -d "$fullPath" ]; then
  l "$fullPath"
  exit 0
fi


local lineRangeMin=0
local lineRangeMax=50
local contextSize=4

# If a specific line is passed, we highlight it and the context around only
if [[ $highlightLine != "" ]]; then
  local lineRangeMin=$(($highlightLine - $contextSize))
  [[ $lineRangeMin < 0 ]] && lineRangeMin=0
  local lineRangeMax=$(($highlightLine + $contextSize))
  local highlightFlag="--highlight-line $highlightLine"
fi

# Display file
local output="$(bat \
  --paging=never \
  --style=numbers \
  --color=always \
  ${=highlightFlag} \
  --line-range $lineRangeMin:$lineRangeMax \
  $fullPath
)"

# If no query passed, we display it like this
if [[ $highlightQuery == "" ]]; then
  echo $output
  exit 0
fi

# We highlight the query
rg \
  --no-line-number \
  "$highlightQuery" \
  <<< "$output"
