#!/usr/bin/env zsh
# [d]ocker [i]mage [b]uild
# Build an image
#
# Usage:
#   - dib => build current directory
#   - dib ../subfolder => Build subfolder
#   - dib ./Dockerfile.test => Build specific dockerfile
#   - dib --name="my_image" => specify image name
#   - dib --force => Overwrites existing image

# DEFAULT VALUES
dockerfile=""
context=""
name=""
forceBuild=0

# PARSE ARGUMENTS
# We iterate on all arguments, trying to parse them and change the default
# values
while [[ "$#" -gt 0 ]]; do
  argumentKey=$1
  argumentValue=$2
  case "$argumentKey" in
    # Change the image name
    --name=*) name="${argumentKey#*=}"; ;;
    --name) name="$argumentValue"; shift ;;

    # Force a rebuild
    --force) forceBuild=1 ;;

    # Dockerfile passed as unnamed argument
    *) dockerfile=$argumentKey; ;;
  esac
  shift
done

# DOCKERFILE
# The Dockerfile is either passed as input, found in the dir passed as input, or
# guessed from the current dir
#
# Default value is looking for Dockerfile in current directory
[[ $dockerfile == "" ]] && dockerfile="./Dockerfile"
# If specified dockerfile is a dir, we look for a Dockerfile there
[[ -d $dockerfile ]] && dockerfile="${dockerfile}/Dockerfile"
# No dockerfile found
if [[ ! -f $dockerfile ]]; then
  echo "âœ— No Dockerfile found"
  exit 1
fi
dockerfile="$(path.resolve $dockerfile)"

# CONTEXT
# Context is the directory where the docker command must run. We guess it from
# the Dockerfile path
context="$(path.dirname $dockerfile)"

# NAME
# Default name is name of the Dockerfile directory
[[ $name == "" ]] && name=$(path.dirname $dockerfile | path.basename)

echo "File: $dockerfile"
echo "Tag: $name"
echo "Context: $context"

docker build \
  --file="$dockerfile" \
  --tag="$name" \
  "$context"

