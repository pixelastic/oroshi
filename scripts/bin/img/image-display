#!/usr/bin/env zsh
# Display an image in the terminal
# Usage:
# $ image-display --clear                     # Clear screen from images
# $ image-display ./path/to/file.png          # Output file.png
# $ image-display ./file.png --fzf-preview    # Pass additional flags to display
#                                               in fzf preview
zparseopts -E -D \
	-fzf-preview=flagFzfPreview \
	-clear=flagClear
local isFzfPreview=${#flagFzfPreview}
local isClear=${#flagClear}

# Check if running inside of Kitty
local isKitty=0
[[ $TERM == "xterm-kitty" ]] && isKitty=1

# --clear: Clear screen and stop
if [[ $isClear == 1 ]]; then
	# Do nothing if not running in kitty
	if [[ $isKitty == 1 ]]; then
		kitty icat \
			--transfer-mode=memory \
			--stdin=no \
			--clear
	fi
	exit 0
fi

# Stop if not an image
local filepath=${1:a}
local filetypeGroup="$(filetype-group $filepath)"
if [[ $filetypeGroup != "image" ]]; then
	echo "✘ ${filepath} is not an image"
	exit 1
fi

# Metadata
local baseName=${filepath:t}
local filesize="$(filesize-human $filepath)"
local dimensions="$(dimensions $filepath)"

colorize "$baseName" $FILETYPE_GROUP_IMAGE_COLOR
echo "Filesize: $filesize"
echo "Dimensions: $dimensions"

# Stop if displaying the image is not possible
if [[ $isKitty == 0 ]]; then
	echo ""
	echo "✘ Preview not available as $TERM ≠ xterm-kitty"
	exit 0
fi

# Add additional flags in fzf preview:
# --stdin=no because some stdin is passed and we need to ignore it
# --place= because we need to display the image at some specific coordinates
local additionalFlags=()
if [[ $isFzfPreview == "1" ]]; then
	additionalFlags+=("--stdin=no")
	additionalFlags+=("--place=${FZF_PREVIEW_COLUMNS}x${FZF_PREVIEW_LINES}@0x0")
fi

kitty icat \
	--transfer-mode=memory \
	${additionalFlags} \
	$filepath
